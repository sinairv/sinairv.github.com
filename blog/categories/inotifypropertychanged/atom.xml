<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: INotifyPropertyChanged | Sina Iravanian]]></title>
  <link href="http://sinairv.github.io/blog/categories/inotifypropertychanged/atom.xml" rel="self"/>
  <link href="http://sinairv.github.io/"/>
  <updated>2015-10-05T00:23:45+11:00</updated>
  <id>http://sinairv.github.io/</id>
  <author>
    <name><![CDATA[Sina Iravanian]]></name>
    <email><![CDATA[sina.iravanian@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handy Extensions for INotifyPropertyChanged]]></title>
    <link href="http://sinairv.github.io/blog/2015/01/15/handy-extensions-for-inotifypropertychanged/"/>
    <updated>2015-01-15T01:22:39+11:00</updated>
    <id>http://sinairv.github.io/blog/2015/01/15/handy-extensions-for-inotifypropertychanged</id>
    <content type="html"><![CDATA[<p>I recently created a <a href="https://github.com/sinairv/INPC-Extensions">library</a> that contains some handy extensions for <code>INotifyPropertyChanged</code> interface (aka INPC). To start using the library, add the following to the top of your C# code:</p>

<p><code>csharp
using NotifyPropertyChangedExtensions;
</code></p>

<h4 id="how-to-easily-raise-inpc-in-a-refactor-friendly-way">How to easily raise INPC in a refactor friendly way</h4>

<p>```csharp
public class MyClass : INotifyPropertyChanged
{
    private int _number;</p>

<pre><code>public int Number
{
    get { return _number; }
    set 
    { 
        if(_number != value)
        {
            _number = value; 
            this.RaisePropertyChanged(() =&gt; Number); 
        }
    }
}

public event PropertyChangedEventHandler PropertyChanged; } ```
</code></pre>

<h4 id="how-to-easily-handle-listen-to-inpc-in-a-refactor-friendly-way">How to easily handle (listen to) INPC in a refactor friendly way</h4>

<p>```csharp
MyClass myObject = …;</p>

<p>myObject.HandleOnPropertyChanged(src =&gt; src.Number, sender =&gt;
    {
        Console.WriteLine(“Number changed to {0}”, sender.Number);
    });
```</p>

<h4 id="how-to-do-one-way-binding-from-a-class-that-implements-inpc">How to do one-way binding from a class that implements INPC</h4>

<p>```csharp
var source = new MyClass();
var target = new TargetClass();</p>

<p>source.BindProperty(src =&gt; src.Number, target, t =&gt; t.Num);</p>

<p>source.Number = 10;
Console.WriteLine(target.Num); // 10
```</p>

<p>You can negate a boolean property while binding it. I use it a lot and find it very handy.</p>

<p>```csharp
source.BindProperty(src =&gt; src.IsActive, target, t =&gt; !t.IsDeleted);</p>

<p>source.IsActive = false;
Console.WriteLine(target.IsDeleted); // True
```</p>

<p>You can bind primitive data-types in source class to <code>Nullable</code> primitive data-types in the target class, and vice versa. </p>

<p><code>csharp
source.BindProperty(src =&gt; src.Number, target, t =&gt; t.NullableNumber);
</code></p>

<p>What happens if source is <code>null</code>, and the target is not <code>Nullable</code>? </p>

<p>The default behavior is to update target with default value of that type:</p>

<p>```csharp
target.Number = 10;
source.BindProperty(src =&gt; src.NullableNumber, target, t =&gt; t.Number);</p>

<p>source.NullableNumber = null;
Console.WriteLine(target.Number); // 0
```</p>

<p>You can also choose not to update target if source becomes <code>null</code>:</p>

<p>```csharp
target.Number = 10;
source.BindProperty(src =&gt; src.NullableNumber, target, t =&gt; t.Number, 
    BindPropertyOptions.DontUpdateWhenSourceIsNullAndTargetIsNotNullable);</p>

<p>source.NullableNumber = null;
Console.WriteLine(target.Number); // still 10
```</p>

<h4 id="how-to-find-more-information-about-this-library">How to find more information about this library?</h4>

<p>At the moment the best way to find out how this library works is by reading the unit tests or at least their titles.</p>

<p><a href="https://github.com/sinairv/INPC-Extensions">INPC-Extensions</a> is now hosted in GitHub and is licensed under MIT.</p>
]]></content>
  </entry>
  
</feed>

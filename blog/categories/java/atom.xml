<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Sina Iravanian]]></title>
  <link href="http://sinairv.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://sinairv.github.io/"/>
  <updated>2016-03-14T01:09:34+11:00</updated>
  <id>http://sinairv.github.io/</id>
  <author>
    <name><![CDATA[Sina Iravanian]]></name>
    <email><![CDATA[sina.iravanian@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Problem With Finding Local Resources in Intellij IDEA]]></title>
    <link href="http://sinairv.github.io/blog/2011/05/10/problem-with-finding-local-resources-in-intellij-idea/"/>
    <updated>2011-05-10T22:33:07+10:00</updated>
    <id>http://sinairv.github.io/blog/2011/05/10/problem-with-finding-local-resources-in-intellij-idea</id>
    <content type="html"><![CDATA[<p>Some classes use external data files which are located in the same directory as the one that the <code>.java</code> file is located, or somewhere nearby which can be easily addressed with a relative path. This happens a lot for me, esp. when I am running open source programs developed by someone else. As an example, imagine a class called <code>SampleClass</code> located in a directory in which there exists a text file with the name of <code>SomeFile.txt</code>. One way to have access to the file is through calling the class-loader’s <code>getResource</code> function:</p>

<p><code>java
URL theURL = this.getClass().getResource("SomeFile.txt");
System.out.println(theURL.toString());
</code></p>

<p>I tested this piece of code in <em>NetBeans</em> and it works fine. But not in <em>Intellij IDEA</em>! To solve this (annoying) problem, I needed to add the path of the source directory to <code>classpath</code>. For this purpose I did the following steps in Intellij IDEA 10.0.3 Community Edition:</p>

<ol>
  <li>Right click on the module name and select “Open Module Settings”</li>
  <li>Select “Modules” from the leftmost pane</li>
  <li>Select “Dependencies” tab</li>
  <li>Press “Add…” button and select “1 Single-Entry Module Library…” from the popup menu</li>
  <li>Find and select the “src” folder of your sources.</li>
  <li>Under the “Scope” column, change the scope to “Runtime”</li>
  <li>Press Apply and OK</li>
</ol>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sina Iravanian]]></title>
  <link href="http://sinairv.github.io/atom.xml" rel="self"/>
  <link href="http://sinairv.github.io/"/>
  <updated>2015-10-05T00:23:45+11:00</updated>
  <id>http://sinairv.github.io/</id>
  <author>
    <name><![CDATA[Sina Iravanian]]></name>
    <email><![CDATA[sina.iravanian@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mock Entity Framework DbSet With NSubstitute]]></title>
    <link href="http://sinairv.github.io/blog/2015/10/04/mock-entity-framework-dbset-with-nsubstitute/"/>
    <updated>2015-10-04T23:33:40+11:00</updated>
    <id>http://sinairv.github.io/blog/2015/10/04/mock-entity-framework-dbset-with-nsubstitute</id>
    <content type="html"><![CDATA[<p>The source code for this post is on <a href="https://github.com/sinairv/MockEfDbSetWithNSubstitute">GitHub</a>.</p>

<p>When it comes to mocking a <code>DbSet</code> to test various read and write operations things may get a little bit tricky. Mocking a <code>DbSet</code> for a write operation (<code>Add</code>, <code>Update</code>, or <code>Remove</code>) is quite straightforward. But testing a synchronous read operation requires mocking the whole <code>IQueryable</code> interface. Even more trickier than that is testing an asynchronous read operation which requires mocking an <code>IDbAsyncQueryProvider</code> interface. <a href="https://msdn.microsoft.com/en-au/data/dn314429.aspx">Here</a> is a very good article that demonstrates how to work around these difficulties using <a href="https://github.com/Moq/moq4">Moq</a>. This blog post shows how to achieve the same thing using <a href="http://nsubstitute.github.io/">NSubstitute</a>.</p>

<p>Mocking a <code>DbSet</code> for a write operation is quite straightforward:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">var</span> <span class="n">mockSet</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;&gt;();</span>
</span><span class="line"><span class="kt">var</span> <span class="n">mockContext</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IPeopleDbContext</span><span class="p">&gt;();</span>
</span><span class="line"><span class="n">mockContext</span><span class="p">.</span><span class="n">People</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">mockSet</span><span class="p">);</span>
</span><span class="line"><span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PeopleService</span><span class="p">(</span><span class="n">mockContext</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Act</span>
</span><span class="line"><span class="n">service</span><span class="p">.</span><span class="n">AddPersonAsync</span><span class="p">(</span><span class="k">new</span> <span class="n">Person</span> <span class="p">{</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="n">LastName</span> <span class="p">=</span> <span class="s">&quot;Doe&quot;</span> <span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Assert</span>
</span><span class="line"><span class="n">mockSet</span><span class="p">.</span><span class="n">Received</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">Add</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;());</span>
</span><span class="line"><span class="n">mockContext</span><span class="p">.</span><span class="n">Received</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">SaveChangesAsync</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As seen above mocking the <code>DbSet</code> is as easy as one single call to <code>Substitute.For&lt;DbSet&lt;T&gt;&gt;()</code>.</p>

<p>However mocking a <code>DbSet</code> for a synchronous read operation needs a little bit more work. It needs to mock the whole <code>IQueryable</code> interface:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">var</span> <span class="n">data</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">new</span> <span class="n">Person</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;BBB&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="k">new</span> <span class="n">Person</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;ZZZ&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="k">new</span> <span class="n">Person</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;AAA&quot;</span> <span class="p">},</span>
</span><span class="line"><span class="p">}.</span><span class="n">AsQueryable</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// create a mock DbSet exposing both DbSet and IQueryable interfaces for setup</span>
</span><span class="line"><span class="kt">var</span> <span class="n">mockSet</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;,</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;&gt;();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// setup all IQueryable methods using what you have from &quot;data&quot;</span>
</span><span class="line"><span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span><span class="n">mockSet</span><span class="p">).</span><span class="n">Provider</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Provider</span><span class="p">);</span>
</span><span class="line"><span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span><span class="n">mockSet</span><span class="p">).</span><span class="n">Expression</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Expression</span><span class="p">);</span>
</span><span class="line"><span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span><span class="n">mockSet</span><span class="p">).</span><span class="n">ElementType</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ElementType</span><span class="p">);</span>
</span><span class="line"><span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span><span class="n">mockSet</span><span class="p">).</span><span class="n">GetEnumerator</span><span class="p">().</span><span class="n">Returns</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">());</span>
</span><span class="line">
</span><span class="line"><span class="c1">// do the wiring between DbContext and DbSet</span>
</span><span class="line"><span class="kt">var</span> <span class="n">mockContext</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IPeopleDbContext</span><span class="p">&gt;();</span>
</span><span class="line"><span class="n">mockContext</span><span class="p">.</span><span class="n">People</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">mockSet</span><span class="p">);</span>
</span><span class="line"><span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PeopleService</span><span class="p">(</span><span class="n">mockContext</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Act</span>
</span><span class="line"><span class="kt">var</span> <span class="n">people</span> <span class="p">=</span> <span class="n">service</span><span class="p">.</span><span class="n">GetAllPeople</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Assert</span>
</span><span class="line"><span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">people</span><span class="p">.</span><span class="n">Length</span><span class="p">,</span> <span class="n">Is</span><span class="p">.</span><span class="n">EqualTo</span><span class="p">(</span><span class="m">3</span><span class="p">));</span>
</span><span class="line"><span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">people</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">Is</span><span class="p">.</span><span class="n">EqualTo</span><span class="p">(</span><span class="s">&quot;BBB&quot;</span><span class="p">));</span>
</span><span class="line"><span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">people</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">Is</span><span class="p">.</span><span class="n">EqualTo</span><span class="p">(</span><span class="s">&quot;ZZZ&quot;</span><span class="p">));</span>
</span><span class="line"><span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">people</span><span class="p">[</span><span class="m">2</span><span class="p">].</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">Is</span><span class="p">.</span><span class="n">EqualTo</span><span class="p">(</span><span class="s">&quot;AAA&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mocking a <code>DbSet</code> for an asynchronous read operation requires much more work and a bunch of extra classes. <a href="https://msdn.microsoft.com/en-au/data/dn314429.aspx">This article</a> lists the required extra classes. To name add <a href="https://github.com/sinairv/MockEfDbSetWithNSubstitute/blob/master/MockEfDbSet.Test/TestUtils/TestDbAsyncEnumerable.cs"><code>TestDbAsyncEnumerable</code></a>, <a href="https://github.com/sinairv/MockEfDbSetWithNSubstitute/blob/master/MockEfDbSet.Test/TestUtils/TestDbAsyncEnumerator.cs"><code>TestDbAsyncEnumerator</code></a>, and <a href="https://github.com/sinairv/MockEfDbSetWithNSubstitute/blob/master/MockEfDbSet.Test/TestUtils/TestDbAsyncQueryProvider.cs"><code>TestDbAsyncQueryProvider</code></a> classes to your test project. This is how you’d be able to mock <code>DbSet</code> for asynchronous read operations:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">var</span> <span class="n">data</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">new</span> <span class="n">Person</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;BBB&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="k">new</span> <span class="n">Person</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;ZZZ&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="k">new</span> <span class="n">Person</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;AAA&quot;</span> <span class="p">},</span>
</span><span class="line"><span class="p">}.</span><span class="n">AsQueryable</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// create a mock DbSet exposing both DbSet, IQueryable, and IDbAsyncEnumerable interfaces for setup</span>
</span><span class="line"><span class="kt">var</span> <span class="n">mockSet</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;,</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;,</span> <span class="n">IDbAsyncEnumerable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;&gt;();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// setup all IQueryable and IDbAsyncEnumerable methods using what you have from &quot;data&quot;</span>
</span><span class="line"><span class="c1">// the setup below is a bit different from the test above</span>
</span><span class="line"><span class="p">((</span><span class="n">IDbAsyncEnumerable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span><span class="n">mockSet</span><span class="p">).</span><span class="n">GetAsyncEnumerator</span><span class="p">()</span>
</span><span class="line">    <span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="k">new</span> <span class="n">TestDbAsyncEnumerator</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">data</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">()));</span>
</span><span class="line"><span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span><span class="n">mockSet</span><span class="p">).</span><span class="n">Provider</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="k">new</span> <span class="n">TestDbAsyncQueryProvider</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">data</span><span class="p">.</span><span class="n">Provider</span><span class="p">));</span>
</span><span class="line"><span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span><span class="n">mockSet</span><span class="p">).</span><span class="n">Expression</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Expression</span><span class="p">);</span>
</span><span class="line"><span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span><span class="n">mockSet</span><span class="p">).</span><span class="n">ElementType</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ElementType</span><span class="p">);</span>
</span><span class="line"><span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span><span class="n">mockSet</span><span class="p">).</span><span class="n">GetEnumerator</span><span class="p">().</span><span class="n">Returns</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">());</span>
</span><span class="line">
</span><span class="line"><span class="c1">// do the wiring between DbContext and DbSet</span>
</span><span class="line"><span class="kt">var</span> <span class="n">mockContext</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IPeopleDbContext</span><span class="p">&gt;();</span>
</span><span class="line"><span class="n">mockContext</span><span class="p">.</span><span class="n">People</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">mockSet</span><span class="p">);</span>
</span><span class="line"><span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PeopleService</span><span class="p">(</span><span class="n">mockContext</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Act</span>
</span><span class="line"><span class="kt">var</span> <span class="n">people</span> <span class="p">=</span> <span class="k">await</span> <span class="n">service</span><span class="p">.</span><span class="n">GetAllPeopleAsync</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Assert</span>
</span><span class="line"><span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">people</span><span class="p">.</span><span class="n">Length</span><span class="p">,</span> <span class="n">Is</span><span class="p">.</span><span class="n">EqualTo</span><span class="p">(</span><span class="m">3</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The amount of code per unit test seems a little bit too much. So I created a utility method that creates the mock <code>DbSet</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">NSubstituteUtils</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span> <span class="k">static</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">CreateMockDbSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">data</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class="line">        <span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="k">class</span>
</span><span class="line">    <span class="err">{</span>
</span><span class="line">        <span class="kt">var</span> <span class="n">mockSet</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">DbSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;,</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;,</span> <span class="n">IDbAsyncEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;();</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="kt">var</span> <span class="n">queryable</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">AsQueryable</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// setup all IQueryable and IDbAsyncEnumerable methods using what you have from &quot;data&quot;</span>
</span><span class="line">            <span class="c1">// the setup below is a bit different from the test above</span>
</span><span class="line">            <span class="p">((</span><span class="n">IDbAsyncEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="n">mockSet</span><span class="p">).</span><span class="n">GetAsyncEnumerator</span><span class="p">()</span>
</span><span class="line">                <span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="k">new</span> <span class="n">TestDbAsyncEnumerator</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">queryable</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">()));</span>
</span><span class="line">            <span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="n">mockSet</span><span class="p">).</span><span class="n">Provider</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="k">new</span> <span class="n">TestDbAsyncQueryProvider</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">queryable</span><span class="p">.</span><span class="n">Provider</span><span class="p">));</span>
</span><span class="line">            <span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="n">mockSet</span><span class="p">).</span><span class="n">Expression</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">queryable</span><span class="p">.</span><span class="n">Expression</span><span class="p">);</span>
</span><span class="line">            <span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="n">mockSet</span><span class="p">).</span><span class="n">ElementType</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">queryable</span><span class="p">.</span><span class="n">ElementType</span><span class="p">);</span>
</span><span class="line">            <span class="p">((</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="n">mockSet</span><span class="p">).</span><span class="n">GetEnumerator</span><span class="p">().</span><span class="n">Returns</span><span class="p">(</span><span class="n">queryable</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">());</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">mockSet</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Exploiting this, the unit test code would become shorter and more readable:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">var</span> <span class="n">data</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">new</span> <span class="n">Person</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;BBB&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="k">new</span> <span class="n">Person</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;ZZZ&quot;</span> <span class="p">},</span>
</span><span class="line">    <span class="k">new</span> <span class="n">Person</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;AAA&quot;</span> <span class="p">},</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">var</span> <span class="n">mockSet</span> <span class="p">=</span> <span class="n">NSubstituteUtils</span><span class="p">.</span><span class="n">CreateMockDbSet</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class="line"><span class="kt">var</span> <span class="n">mockContext</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IPeopleDbContext</span><span class="p">&gt;();</span>
</span><span class="line"><span class="n">mockContext</span><span class="p">.</span><span class="n">People</span><span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">mockSet</span><span class="p">);</span>
</span><span class="line"><span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PeopleService</span><span class="p">(</span><span class="n">mockContext</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Act</span>
</span><span class="line"><span class="kt">var</span> <span class="n">secondPerson</span> <span class="p">=</span> <span class="k">await</span> <span class="n">service</span><span class="p">.</span><span class="n">GetPersonAsync</span><span class="p">(</span><span class="m">2</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Assert</span>
</span><span class="line"><span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">secondPerson</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">Is</span><span class="p">.</span><span class="n">EqualTo</span><span class="p">(</span><span class="m">2</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The source code for this post is accessible from <a href="https://github.com/sinairv/MockEfDbSetWithNSubstitute">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell: The Switch Data-type]]></title>
    <link href="http://sinairv.github.io/blog/2015/05/18/powershell-the-switch-data-type/"/>
    <updated>2015-05-18T00:45:18+10:00</updated>
    <id>http://sinairv.github.io/blog/2015/05/18/powershell-the-switch-data-type</id>
    <content type="html"><![CDATA[<p>The <code>switch</code> data type is used to control whether a switch (as in arguments or options passed to a function or command) is provided for the function/command or not. Suppose that there is a function called <code>Switch-Demo</code> that can accept <code>-Force</code> and <code>-Quiet</code> switches. These switches just work as toggles. What we care about them is whether they exist or not. There are no pieces of data accompanying them. The PowerShell <code>switch</code> data-type suits this purpose:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="powershell"><span class="line"><span class="k">function</span> <span class="k">Switch</span><span class="n">-Demo</span> <span class="p">{</span>
</span><span class="line">    <span class="k">param</span><span class="p">(</span>
</span><span class="line">        <span class="no">[switch]</span><span class="nv">$Force</span><span class="p">,</span>
</span><span class="line">        <span class="no">[switch]</span><span class="nv">$Quiet</span>
</span><span class="line">    <span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="nv">$Force</span><span class="p">.</span><span class="n">IsPresent</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">Write-Host</span> <span class="s2">&quot;Forcefully doing the task&quot;</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">Write-Host</span> <span class="s2">&quot;Force is NOT present&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="nv">$Quiet</span><span class="p">.</span><span class="n">IsPresent</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">Write-Host</span> <span class="s2">&quot;Quietly doing the task&quot;</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">Write-Host</span> <span class="s2">&quot;Quiet is NOT present&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c"># invocation:</span>
</span><span class="line"><span class="k">Switch</span><span class="n">-Demo</span> <span class="n">-Quiet</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the invocation of the above example, the <code>Quiet</code> switch is present while the <code>Force</code> switch is not.</p>

<p>As shown above, the <code>.IsPresent</code> property of the <code>switch</code> variable can be used to check whether the particular switch has been passed to the function/command.</p>

<p><strong>Default values</strong> for the parameters of type <code>switch</code> can be specified by Boolean values. To make a switch present by default the <code>[switch]::Present</code> constant can also be used, which is equivalent to <code>$true</code>. As of now I’m not aware of any <code>[switch]::</code> constants that is equivalent to <code>$false</code>. Example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="powershell"><span class="line"><span class="k">function</span> <span class="k">Switch</span><span class="n">-Demo</span> <span class="p">{</span>
</span><span class="line">    <span class="k">param</span><span class="p">(</span>
</span><span class="line">        <span class="no">[switch]</span><span class="nv">$Force</span><span class="p">=</span><span class="no">[switch]</span><span class="err">::</span><span class="n">Present</span><span class="p">,</span>
</span><span class="line">        <span class="no">[switch]</span><span class="nv">$Quiet</span><span class="p">=</span><span class="nv">$false</span><span class="p">,</span>
</span><span class="line">        <span class="no">[switch]</span><span class="nv">$WhatIf</span><span class="p">=</span><span class="nv">$true</span>
</span><span class="line">    <span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># ...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This means that the invoker does not need to specify <code>-Force</code> switch (it is by default considered to be provided). What if the invoker doesn’t like the <code>-Force</code> switch to be present? To override that the invoker can specify Boolean constants as values for the switch:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="powershell"><span class="line"><span class="k">Switch</span><span class="n">-Demo</span> <span class="n">-Force</span><span class="err">:</span><span class="nv">$false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I personally don’t find this way of overriding switch values quite intuitive. I’d rather name <code>switch</code> variables in a way that their default value is <code>$false</code>, or when not possible provide another switch with a negative name compared to the other one that overrides its functionality. Example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="powershell"><span class="line"><span class="k">function</span> <span class="k">Switch</span><span class="n">-Demo</span> <span class="p">{</span>
</span><span class="line">    <span class="k">param</span><span class="p">(</span>
</span><span class="line">        <span class="no">[switch]</span><span class="nv">$Quiet</span><span class="p">=</span><span class="no">[switch]</span><span class="err">::</span><span class="n">Present</span><span class="p">,</span>
</span><span class="line">        <span class="no">[switch]</span><span class="nv">$Verbose</span>
</span><span class="line">    <span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># Override the values</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="nv">$Verbose</span><span class="p">.</span><span class="n">IsPresent</span><span class="p">){</span>
</span><span class="line">        <span class="nv">$Quiet</span> <span class="p">=</span> <span class="nv">$false</span><span class="err">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c"># Check the values</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="nv">$Quiet</span><span class="p">.</span><span class="n">IsPresent</span><span class="p">){</span>
</span><span class="line">        <span class="nb">Write-Host</span> <span class="s2">&quot;Quietly doing the job.&quot;</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">Write-Host</span> <span class="s2">&quot;Verbosely doing the job.&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c"># invocations:</span>
</span><span class="line"><span class="k">Switch</span><span class="n">-Demo</span> <span class="n">-Quiet</span>
</span><span class="line"><span class="k">Switch</span><span class="n">-Demo</span> <span class="n">-Verbose</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handy Extensions for INotifyPropertyChanged]]></title>
    <link href="http://sinairv.github.io/blog/2015/01/15/handy-extensions-for-inotifypropertychanged/"/>
    <updated>2015-01-15T01:22:39+11:00</updated>
    <id>http://sinairv.github.io/blog/2015/01/15/handy-extensions-for-inotifypropertychanged</id>
    <content type="html"><![CDATA[<p>I recently created a <a href="https://github.com/sinairv/INPC-Extensions">library</a> that contains some handy extensions for <code>INotifyPropertyChanged</code> interface (aka INPC). To start using the library, add the following to the top of your C# code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="k">using</span> <span class="nn">NotifyPropertyChangedExtensions</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="how-to-easily-raise-inpc-in-a-refactor-friendly-way">How to easily raise INPC in a refactor friendly way</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">private</span> <span class="kt">int</span> <span class="n">_number</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="kt">int</span> <span class="n">Number</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_number</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">        <span class="k">set</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="n">_number</span> <span class="p">!=</span> <span class="k">value</span><span class="p">)</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="n">_number</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class="line">                <span class="k">this</span><span class="p">.</span><span class="n">RaisePropertyChanged</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">Number</span><span class="p">);</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="how-to-easily-handle-listen-to-inpc-in-a-refactor-friendly-way">How to easily handle (listen to) INPC in a refactor friendly way</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">MyClass</span> <span class="n">myObject</span> <span class="p">=</span> <span class="p">...;</span>
</span><span class="line">
</span><span class="line"><span class="n">myObject</span><span class="p">.</span><span class="n">HandleOnPropertyChanged</span><span class="p">(</span><span class="n">src</span> <span class="p">=&gt;</span> <span class="n">src</span><span class="p">.</span><span class="n">Number</span><span class="p">,</span> <span class="n">sender</span> <span class="p">=&gt;</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Number changed to {0}&quot;</span><span class="p">,</span> <span class="n">sender</span><span class="p">.</span><span class="n">Number</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="how-to-do-one-way-binding-from-a-class-that-implements-inpc">How to do one-way binding from a class that implements INPC</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">var</span> <span class="n">source</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">();</span>
</span><span class="line"><span class="kt">var</span> <span class="n">target</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TargetClass</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="n">source</span><span class="p">.</span><span class="n">BindProperty</span><span class="p">(</span><span class="n">src</span> <span class="p">=&gt;</span> <span class="n">src</span><span class="p">.</span><span class="n">Number</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Num</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">source</span><span class="p">.</span><span class="n">Number</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
</span><span class="line"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">Num</span><span class="p">);</span> <span class="c1">// 10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can negate a boolean property while binding it. I use it a lot and find it very handy.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">source</span><span class="p">.</span><span class="n">BindProperty</span><span class="p">(</span><span class="n">src</span> <span class="p">=&gt;</span> <span class="n">src</span><span class="p">.</span><span class="n">IsActive</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">t</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">t</span><span class="p">.</span><span class="n">IsDeleted</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">source</span><span class="p">.</span><span class="n">IsActive</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class="line"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">IsDeleted</span><span class="p">);</span> <span class="c1">// True</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can bind primitive data-types in source class to <code>Nullable</code> primitive data-types in the target class, and vice versa. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">source</span><span class="p">.</span><span class="n">BindProperty</span><span class="p">(</span><span class="n">src</span> <span class="p">=&gt;</span> <span class="n">src</span><span class="p">.</span><span class="n">Number</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">NullableNumber</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What happens if source is <code>null</code>, and the target is not <code>Nullable</code>? </p>

<p>The default behavior is to update target with default value of that type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">target</span><span class="p">.</span><span class="n">Number</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
</span><span class="line"><span class="n">source</span><span class="p">.</span><span class="n">BindProperty</span><span class="p">(</span><span class="n">src</span> <span class="p">=&gt;</span> <span class="n">src</span><span class="p">.</span><span class="n">NullableNumber</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Number</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">source</span><span class="p">.</span><span class="n">NullableNumber</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class="line"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">Number</span><span class="p">);</span> <span class="c1">// 0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can also choose not to update target if source becomes <code>null</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="n">target</span><span class="p">.</span><span class="n">Number</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
</span><span class="line"><span class="n">source</span><span class="p">.</span><span class="n">BindProperty</span><span class="p">(</span><span class="n">src</span> <span class="p">=&gt;</span> <span class="n">src</span><span class="p">.</span><span class="n">NullableNumber</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">Number</span><span class="p">,</span>
</span><span class="line">    <span class="n">BindPropertyOptions</span><span class="p">.</span><span class="n">DontUpdateWhenSourceIsNullAndTargetIsNotNullable</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">source</span><span class="p">.</span><span class="n">NullableNumber</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class="line"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">Number</span><span class="p">);</span> <span class="c1">// still 10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="how-to-find-more-information-about-this-library">How to find more information about this library?</h4>

<p>At the moment the best way to find out how this library works is by reading the unit tests or at least their titles.</p>

<p><a href="https://github.com/sinairv/INPC-Extensions">INPC-Extensions</a> is now hosted in GitHub and is licensed under MIT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntax Highlighter for Windows Forms Rich Text Box]]></title>
    <link href="http://sinairv.github.io/blog/2014/12/01/syntax-highlighter-for-windows-forms-rich-text-box/"/>
    <updated>2014-12-01T19:18:48+11:00</updated>
    <id>http://sinairv.github.io/blog/2014/12/01/syntax-highlighter-for-windows-forms-rich-text-box</id>
    <content type="html"><![CDATA[<p>Years ago I created a tool called <a href="http://code4public.codeplex.com">Code4Public</a> to convert source code into HTML called. I was using this tool to put nice code snippets in the blog I used to maintain at that time. The tool is able to get the code, apply syntax highlighting to it based on the syntax of the language selected, and then create HTML based on the theme selected (e.g., MSDN theme). I didn’t assign more time on making the tool better and better, as better ways of doing the same task were emerging, and also other by-products of the tool were becoming more interesting at the time; e.g., <a href="https://github.com/sinairv/YAXLib">YAXLib</a> was a little by-product of Code4Public used to store settings, themes and language syntaxes in XML files.</p>

<p>This post is to introduce yet another by-product of Code4Public: <a href="https://github.com/sinairv/WinFormsSyntaxHighlighter">WinFormsSyntaxHighlighter</a>. This library enables syntax highlighting on a <code>RichTextBox</code> based on patterns that the developer defines.</p>

<p>The syntax highlighter hooks into <code>RichTextBox</code> events in the constructor.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">var</span> <span class="n">syntaxHighlighter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SyntaxHighlighter</span><span class="p">(</span><span class="n">theRichTextBox</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it. Now I need to define patterns and colors. For example I want to see <code>for</code>, <code>foreach</code>, <code>int</code> and <code>var</code> in blue:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="c1">// 1st set of keywords; I&#39;d like to see them in Blue</span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">PatternDefinition</span><span class="p">(</span><span class="s">&quot;for&quot;</span><span class="p">,</span> <span class="s">&quot;foreach&quot;</span><span class="p">,</span> <span class="s">&quot;int&quot;</span><span class="p">,</span> <span class="s">&quot;var&quot;</span><span class="p">),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I can also define whether I want to see a pattern in <em>bold</em> or <em>italics</em>. For example I want to see <code>public</code>, <code>partial</code>, <code>class</code>, and <code>void</code> in bold navy but not italics. I want the match these words case-insensitively, so that <code>PuBlIc</code> will be shown in navy blue as well. Note that this is an imaginary syntax for demonstration purposes only:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="c1">// 2nd set of keywords; I&#39;d like to see them in bold Navy, and they must be case insensitive</span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">CaseInsensitivePatternDefinition</span><span class="p">(</span><span class="s">&quot;public&quot;</span><span class="p">,</span> <span class="s">&quot;partial&quot;</span><span class="p">,</span> <span class="s">&quot;class&quot;</span><span class="p">,</span> <span class="s">&quot;void&quot;</span><span class="p">),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Navy</span><span class="p">,</span> <span class="n">bold</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">italic</span><span class="p">:</span> <span class="k">false</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I can also define the patterns directly with regular expression:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="c1">// numbers; I&#39;d like to see them in purple</span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">PatternDefinition</span><span class="p">(</span><span class="s">@&quot;\d+\.\d+|\d+&quot;</span><span class="p">),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Purple</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Since the input string is partitioned by the patterns defined in the order of their definition, they must be added in the proper order. E.g., I want to see numbers in purple, but not those numbers inside a comment or inside a string. So the pattern definition for a comment block must be added first, then the pattern for string literal, and at last the pattern for numbers. The following is a more complete example from the beginning to the end.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">var</span> <span class="n">syntaxHighlighter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SyntaxHighlighter</span><span class="p">(</span><span class="n">theRichTextBox</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// That&#39;s it. Now tell me how you&#39;d like to see what...</span>
</span><span class="line">
</span><span class="line"><span class="c1">// multi-line comments; I&#39;d like to see them in dark-sea-green and italic</span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">PatternDefinition</span><span class="p">(</span><span class="k">new</span> <span class="n">Regex</span><span class="p">(</span><span class="s">@&quot;/\*(.|[\r\n])*?\*/&quot;</span><span class="p">,</span> 
</span><span class="line">        <span class="n">RegexOptions</span><span class="p">.</span><span class="n">Multiline</span> <span class="p">|</span> <span class="n">RegexOptions</span><span class="p">.</span><span class="n">Compiled</span><span class="p">)),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">DarkSeaGreen</span><span class="p">,</span> <span class="n">bold</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">italic</span><span class="p">:</span> <span class="k">true</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// singlie-line comments; I&#39;d like to see them in Green and italic</span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">PatternDefinition</span><span class="p">(</span><span class="k">new</span> <span class="n">Regex</span><span class="p">(</span><span class="s">@&quot;//.*?$&quot;</span><span class="p">,</span> 
</span><span class="line">        <span class="n">RegexOptions</span><span class="p">.</span><span class="n">Multiline</span> <span class="p">|</span> <span class="n">RegexOptions</span><span class="p">.</span><span class="n">Compiled</span><span class="p">)),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Green</span><span class="p">,</span> <span class="n">bold</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">italic</span><span class="p">:</span> <span class="k">true</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// double quote strings; I&#39;d like to see them in Red</span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">PatternDefinition</span><span class="p">(</span><span class="s">@&quot;\&quot;&quot;([^&quot;&quot;]|\&quot;&quot;\&quot;&quot;)+\&quot;&quot;&quot;</span><span class="p">),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// single quote strings; I&#39;d like to see them in Salmon </span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">PatternDefinition</span><span class="p">(</span><span class="s">@&quot;\&#39;([^&#39;]|\&#39;\&#39;)+\&#39;&quot;</span><span class="p">),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Salmon</span><span class="p">));</span>
</span><span class="line">            
</span><span class="line"><span class="c1">// 1st set of keywords; I&#39;d like to see them in Blue</span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">PatternDefinition</span><span class="p">(</span><span class="s">&quot;for&quot;</span><span class="p">,</span> <span class="s">&quot;foreach&quot;</span><span class="p">,</span> <span class="s">&quot;int&quot;</span><span class="p">,</span> <span class="s">&quot;var&quot;</span><span class="p">),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">));</span>
</span><span class="line">            
</span><span class="line"><span class="c1">// 2nd set of keywords; I&#39;d like to see them in bold Navy, and they must be case insensitive</span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">CaseInsensitivePatternDefinition</span><span class="p">(</span><span class="s">&quot;public&quot;</span><span class="p">,</span> <span class="s">&quot;partial&quot;</span><span class="p">,</span> <span class="s">&quot;class&quot;</span><span class="p">,</span> <span class="s">&quot;void&quot;</span><span class="p">),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Navy</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">false</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// numbers; I&#39;d like to see them in purple</span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">PatternDefinition</span><span class="p">(</span><span class="s">@&quot;\d+\.\d+|\d+&quot;</span><span class="p">),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Purple</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c1">// operators; I&#39;d like to see them in Brown</span>
</span><span class="line"><span class="n">syntaxHighlighter</span><span class="p">.</span><span class="n">AddPattern</span><span class="p">(</span>
</span><span class="line">    <span class="k">new</span> <span class="nf">PatternDefinition</span><span class="p">(</span><span class="s">&quot;+&quot;</span><span class="p">,</span> <span class="s">&quot;-&quot;</span><span class="p">,</span> <span class="s">&quot;&gt;&quot;</span><span class="p">,</span> <span class="s">&quot;&lt;&quot;</span><span class="p">,</span> <span class="s">&quot;&amp;&quot;</span><span class="p">,</span> <span class="s">&quot;|&quot;</span><span class="p">),</span> 
</span><span class="line">    <span class="k">new</span> <span class="nf">SyntaxStyle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Brown</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please also note that, nobody can model a whole language like C# or Java with regular expressions, because these languages are not regular. So this tool is by no means a complete and error-free way of modeling languages. Use this just for simple key-word matching or pattern matching and coloring them as you like; but don’t expect too much.</p>

<p><a href="https://github.com/sinairv/WinFormsSyntaxHighlighter">WinFormsSyntaxHighlighter</a> is hosted in GitHub and is licensed under MIT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Pains of Upgrading Android Studio]]></title>
    <link href="http://sinairv.github.io/blog/2014/04/20/the-pains-of-upgrading-android-studio/"/>
    <updated>2014-04-20T20:32:23+10:00</updated>
    <id>http://sinairv.github.io/blog/2014/04/20/the-pains-of-upgrading-android-studio</id>
    <content type="html"><![CDATA[<p>I could gracefully install and test earlier versions of Android Studio before they adopted <a href="http://www.gradle.org/">Gradle</a> for their build system. After doing the upgrade I could no longer build a single project with weird error messages relating to Gradle. I searched the web, and found some workarounds in stackoverflow, e.g., manually installing Gradle, updating environment variables and so and so. None of them were helpful for me, although they seemed to be solving the issue for many (who have voted for the answers). I had to do the following steps instead:</p>

<ol>
  <li>Downloaded the latest version of SDK which is bundled with Eclipse. Although many answers suggested to upgrade the SDK to the latest version through SDK Manager, and I did so; it did not solve my problem. So I downloaded a fresh copy of latest SDK bundled with eclipse, and then updated Android Studio settings to refer to this new SDK. This trick solved the build problem.</li>
  <li>When running the emulator I got a very descriptive error message (#NOT) that says: <em>PANIC: could not open Nexus</em>, in which <em>Nexus</em> is the name of my emulator. For this problem what I found on stackoverflow was quite helpful, for example see <a href="http://stackoverflow.com/questions/15103782/avd-panic-could-not-open-not-a-path-issue">this thread</a>. The trick is to create an environment variable called <code>ANDROID_SDK_HOME</code> and set it to the path of the folder containing <code>.android</code> folder. If you don’t know where is your <code>.android</code> folder, AVD Manager will give you the path in its main screen right above the list of existing virtual devices. For my case it was in <code>D:\Documents</code>. After setting the environment variable I had to restart both AVD Manager and Android Studio.</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moved My Blog to Octopress]]></title>
    <link href="http://sinairv.github.io/blog/2014/01/10/moved-my-blog-to-octopress/"/>
    <updated>2014-01-10T02:22:25+11:00</updated>
    <id>http://sinairv.github.io/blog/2014/01/10/moved-my-blog-to-octopress</id>
    <content type="html"><![CDATA[<p>I’ve moved my blog from <a href="http://sinairv.wordpress.com">Wordpress</a> to my <a href="http://sinairv.github.io">homepage domain</a>. It makes use of <a href="http://octopress.org/">Octopress</a>, which is based on <a href="http://jekyllrb.com/">Jekyll</a>, and is a static site generator. The blog is hosted on GitHub pages, and is <a href="https://github.com/sinairv/sinairv.github.com">open source</a>. </p>

<p>The great benefit of this stack of tools is that I can easily create and edit my posts in <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a>, re-generate the blog <a href="http://octopress.org/docs/blogging/">through command line</a>, and make use of <a href="http://rake.rubyforge.org/">Rake</a> (Ruby’s make tools) to perform various tasks ranging from post creation to deployment to GitHub pages. It’s awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make More Refactoring Friendly Data-bindings With C# 5]]></title>
    <link href="http://sinairv.github.io/blog/2012/11/01/how-to-make-more-refactoring-friendly-data-bindings-with-c-number-5/"/>
    <updated>2012-11-01T20:46:29+11:00</updated>
    <id>http://sinairv.github.io/blog/2012/11/01/how-to-make-more-refactoring-friendly-data-bindings-with-c-number-5</id>
    <content type="html"><![CDATA[<p>Imagine that we want to create a <code>Person</code> business object for whose properties we desire a two-way data binding. The source-to-target data-binding can be triggered by implementing <code>INotifyPropertyChanged</code> interface, like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">private</span> <span class="kt">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class="line">    <span class="k">private</span> <span class="kt">double</span> <span class="n">_age</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> 
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">get</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">_name</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">set</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="p">!=</span> <span class="n">_name</span><span class="p">)</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="n">_name</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class="line">                <span class="n">OnPropertyChanged</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">);</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="kt">double</span> <span class="n">Age</span> 
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">get</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">_age</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">set</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">_age</span> <span class="p">!=</span> <span class="k">value</span><span class="p">)</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="n">_age</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class="line">                <span class="n">OnPropertyChanged</span><span class="p">(</span><span class="s">&quot;Age&quot;</span><span class="p">);</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span> <span class="k">void</span> <span class="nf">OnPropertyChanged</span><span class="p">(</span><span class="kt">string</span> <span class="n">propertyName</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">PropertyChanged</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">PropertyChanged</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="n">PropertyChangedEventArgs</span><span class="p">(</span><span class="n">propertyName</span><span class="p">));</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>See how the setters pass the property name in a <code>string</code>. This is not nice, because whenever we change the property name through refactoring tools, the string value remains untouched and we have to manually change them as well (if we are lucky enough to get notified before run-time). Anyway we had to tolerate them for years…</p>

<p>C# 5 comes with a nice feature, which is addition of two attributes <code>[CallerFilePath]</code> and <code>[CallerMemberName]</code> in the <code>System.Runtime.CompilerServices</code> namespace. If you decorate an <strong>optional</strong> string parameter of a method with one of these attributes, then the value of that parameter will be replaced with the caller’s file name or the caller’s member name at runtime, if no explicit value is passed for the optional parameter. They come very handy in logging scenarios, but we can use the latter for making our data-binding code nicer. This is how:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">private</span> <span class="kt">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class="line">    <span class="k">private</span> <span class="kt">double</span> <span class="n">_age</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> 
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">get</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">_name</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">set</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="p">!=</span> <span class="n">_name</span><span class="p">)</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="n">_name</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class="line">                <span class="n">OnPropertyChanged</span><span class="p">();</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="kt">double</span> <span class="n">Age</span> 
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">get</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">_age</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">set</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">_age</span> <span class="p">!=</span> <span class="k">value</span><span class="p">)</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="n">_age</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class="line">                <span class="n">OnPropertyChanged</span><span class="p">();</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span> <span class="k">void</span> <span class="nf">OnPropertyChanged</span><span class="p">([</span><span class="n">CallerMemberName</span><span class="p">]</span><span class="kt">string</span> <span class="n">propertyName</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">PropertyChanged</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">PropertyChanged</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="n">PropertyChangedEventArgs</span><span class="p">(</span><span class="n">propertyName</span><span class="p">));</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now that string constants are removed from the setters we can more freely refactor our code. After being spoiled by automatic properties, this is still a very verbose way of defining properties; however it is much better than before.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Ways of Generating New GUIDs]]></title>
    <link href="http://sinairv.github.io/blog/2012/09/22/different-ways-of-generating-new-guids/"/>
    <updated>2012-09-22T17:49:59+10:00</updated>
    <id>http://sinairv.github.io/blog/2012/09/22/different-ways-of-generating-new-guids</id>
    <content type="html"><![CDATA[<h3 id="in-c-code">In C# Code</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">var</span> <span class="n">newGuid</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="in-visual-studio">In Visual Studio</h3>
<p>Go to: <code>Tools &gt; Create GUID</code></p>

<h3 id="in-sql-server-management-studio">In SQL Server Management Studio</h3>
<p>Execute either of the following queries:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">SELECT</span> <span class="n">NEWID</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="n">PRINT</span> <span class="n">NEWID</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="none-of-the-above">None of the above</h3>
<p>Go to <a href="http://newguid.com/">newguid.com</a>, and refresh the page as many times as you want.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Example for C# Dynamic in Action]]></title>
    <link href="http://sinairv.github.io/blog/2012/07/23/an-example-for-c-number-dynamic-in-action/"/>
    <updated>2012-07-23T17:20:53+10:00</updated>
    <id>http://sinairv.github.io/blog/2012/07/23/an-example-for-c-number-dynamic-in-action</id>
    <content type="html"><![CDATA[<p>Recently I was involved with enabling validation for a Windows Forms form containing several pages shown through a tree view. There were one user control defined for each page, therefore whenever a node in tree-view got activated, an instance of that user-control were shown. The user-controls did not have a common user-defined parent base-class or interface. The author of the existing code had defined a <code>Save</code> method in each control separately which performed updating data with values entered in the forms.</p>

<p>First, I changed all <code>void Save()</code> methods to <code>bool Save()</code>, and performed the validation stuff in each control separately. Then in the parent form, I created an array of <code>Control</code>s, so that I could loop through them, and call their <code>Save</code> method. But wait, <code>Save</code> is not inherited from any base-class or interface, so there’s no polymorphism at hand. How can I call them through references of type <code>Control</code>?</p>

<p>Well honestly, the best solution would be adding a new interface to the project, say <code>ISavableControl</code> or something, add the <code>Save</code> method to it, and let the controls implement that interface. But I wanted to make a quick fix to the problem without adding new files and types to the code. Here C#’s <code>dynamic</code> comes into action.</p>

<p>Using <code>dynamic</code> keyword, one postpones binding methods, properties, and fields to run-time. In our scenario we know that the user-controls each have a method called <code>Save</code>, which is not derived from a parent. Without <code>dynamic</code>, I would need to have a reference explicitly from each user control’s type, and I would have to call them one by one, as in:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="kt">bool</span> <span class="n">succeeded</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class="line"><span class="n">succeeded</span> <span class="p">=</span> <span class="n">userControl1</span><span class="p">.</span><span class="n">Save</span><span class="p">();</span>
</span><span class="line"><span class="n">succeeded</span> <span class="p">=</span> <span class="n">succeeded</span> <span class="p">||</span> <span class="n">userControl2</span><span class="p">.</span><span class="n">Save</span><span class="p">();</span>
</span><span class="line"><span class="n">succeeded</span> <span class="p">=</span> <span class="n">succeeded</span> <span class="p">||</span> <span class="n">userControl3</span><span class="p">.</span><span class="n">Save</span><span class="p">();</span>
</span><span class="line"><span class="c1">// ...</span>
</span><span class="line"><span class="n">succeeded</span> <span class="p">=</span> <span class="n">succeeded</span> <span class="p">||</span> <span class="n">userControln</span><span class="p">.</span><span class="n">Save</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However using <code>dynamic</code> keyword, life gets a lot easier:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="c1">// objects are not inherited from a base class or interface,</span>
</span><span class="line"><span class="c1">// therefore we cannot call Save using polymorphism</span>
</span><span class="line"><span class="kt">bool</span> <span class="n">succeeded</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class="line"><span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">ctrl</span> <span class="k">in</span> <span class="n">controlsArray</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">dynamic</span> <span class="n">dynCtrl</span> <span class="p">=</span> <span class="n">ctrl</span><span class="p">;</span>
</span><span class="line">    <span class="n">succeeded</span> <span class="p">=</span> <span class="n">succeeded</span> <span class="p">||</span> <span class="n">dynCtrl</span><span class="p">.</span><span class="n">Save</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// do something with the value of succeeded</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Take care that binding the <code>Save</code> methods to controls happen at runtime. Therefore if a control does not implement a <code>Save</code> method, or if another one misspells <code>Save</code>, as say <code>Svae</code>, you will get no hints at compile time. So, try to avoid this style of coding, unless you have good reasons for doing so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Koans: One of the Best Ways to Learn a New Language or Framework]]></title>
    <link href="http://sinairv.github.io/blog/2012/05/27/programming-koans-one-of-the-best-ways-to-learn-a-new-language-or-framework/"/>
    <updated>2012-05-27T16:46:35+10:00</updated>
    <id>http://sinairv.github.io/blog/2012/05/27/programming-koans-one-of-the-best-ways-to-learn-a-new-language-or-framework</id>
    <content type="html"><![CDATA[<p>Based on Wikipedia, originally a <a href="http://en.wikipedia.org/wiki/K%C5%8Dan">Koan in Zen-practice</a> is a paradoxical question that provokes doubt and tests a student’s progress. On the other hand, programming Koans are a set of failing unit-tests, for which the learner is required to fix the code or fill the required fields with proper values in order to make each test pass. Probably one of the earliest and most popular Koans were <a href="http://rubykoans.com/">Ruby Koans</a>. Now there are several Koans implemented for different languages and frameworks. Search the word “Koan” in <a href="https://github.com/">GitHub</a> or <a href="https://bitbucket.org/">BitBucket</a> and you will find the gems.</p>

<p>My first experience of Koans was <a href="https://github.com/rally25rs/MoqKoans">MoqKoans</a>, a great set of Koans for learning <a href="http://code.google.com/p/moq/">Moq</a>, a mocking library for the .NET framework. That was really a wonderful learning experience. These days I’m trying to strengthen my web programming skills, and as one of the early steps I decided to remaster JavaScript. I found two JavaScript Koans on GitHub; both of them are great. However, I suggest that one should start with the <a href="https://github.com/liammclennan/JavaScript-Koans">JavaScript Koans by Liam McLennan</a>, which is easier to begin with. after finishing this step, I highly recommend proceeding with the<a href="https://github.com/mrdavidlaing/javascript-koans">JavaScript Koans by David Laing</a>. This one is a smaller set of Koans, but gets more advanced, and contains an introduction to <a href="http://underscorejs.org/">Underscore.js</a> as well.</p>

<p>Experience the joy of learning with Koans, and having all the reds going green in the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Git With GitHub on Windows]]></title>
    <link href="http://sinairv.github.io/blog/2012/05/05/using-git-with-github-on-windows/"/>
    <updated>2012-05-05T16:25:00+10:00</updated>
    <id>http://sinairv.github.io/blog/2012/05/05/using-git-with-github-on-windows</id>
    <content type="html"><![CDATA[<p>If you’re new to Git and don’t know how to install Git on Windows, read my earlier post: <a href="http://sinairv.github.io/blog/2012/05/01/how-to-setup-git-for-windows/">How to Setup Git for Windows</a></p>

<p>In an earlier <a href="http://sinairv.github.io/blog/2012/05/02/using-git-with-codeplex-on-windows/">post</a>, I described the preliminary steps required to work with git on CodePlex. However using git with<a href="https://github.com/">GitHub</a> requires more initial steps.</p>

<p><strong>Generating SSH Keys.</strong> Before proceeding to Git operations we need to create SSH public and private keys, and register the public key on the GitHub site. In order to generate the keys we can use PuTTY Key Generator, which is already bundled with TortoiseGit fortunately. This program is called “Puttygen” and can be found in start-menu under TortoiseGit:</p>

<p><img src="http://sinairv.github.io/images/posts/tortoisegit-puttygen.png" alt="puttygen under TortoiseGit in Windows start-menu" /></p>

<p>After running Puttygen you need to press “Generate”, and make some crazy mouse movements in the spotted area to provide some random data for the program (wow, what a brilliant idea). When finished you will have the public key generated. It is recommended that you provide a passphrase so that you would have a more secure private key. After that save your public and private keys using the 2 save buttons near the bottom of the window. But these are not all that you need to save! The public key format that GitHub and some other applications require you to provide is not the one that this program has saved for you. The topmost field which is labelled “Public key for passing into OpenSSH authorized_keys file” is the one that GitHub needs. It should be in one line (i.e., with no line-breaks), therefore we would refer to it later as the one-line-public-key. Please save the contents of this field and the next “key fingerprint” field somewhere for future references.</p>

<p><img src="http://sinairv.github.io/images/posts/puttygenfields.png" alt="Puttygen fields" /></p>

<p><strong>Registering SSH Keys in GitHub.</strong> Browse to GitHub, and go to your Account Seetings, and select SSH Keystherein. Press the Add SSH key button on the right. Provide a name for the key (I chose TortoiseGit), and paste the one-line-public-key in the Key field. Press Add Key. You may be prompted for your GitHub account password next. When finished, GitHub adds this key to its list of keys and provides a fingerprint. Make sure this fingerprint matches the key fingerprint that Puttygen created for you.</p>

<p><strong>Creating a Repository in GitHub.</strong> Browse to the GitHub page and press the “Create a New Repo” button at the top of the page.</p>

<p><img src="http://sinairv.github.io/images/posts/githubnewrepo.png" alt="GitHub Create New Repo" /></p>

<p>In the new form that appears, enter desired values for your project’s name and description. Currently there’s an option to add a README file or an appropriate <code>.gitignore</code> file to the repository. While making use of these options are recommended, in this tutorial I intend to start from a completely empty repository; therefore I unchecked those options. When finished press the “Create repository” button. With these steps I created a project called “PdfRenamer”.</p>

<p><strong>Setting up TortoiseGit for the new project.</strong> After creating the repository, GitHub introduces some helpful basic commands to start working with the repository. We don’t intend to use the command-line, however this page contains useful information such as user-name and email with which GitHub recognizes you, and the git repository address, as highlighted below:</p>

<p><img src="http://sinairv.github.io/images/posts/githubnewprojectaddressandusername1.png" alt="GitHub New Project Address And User-Name" /></p>

<p>We need to do the following steps next:</p>

<ol>
  <li>Right click somewhere in the Windows explorer window, and from the context-menu go to: TortoiseGit &gt; Settings » Git branch; and fill the user-name and email fields with the ones suggested by GitHub, and press OK.</li>
  <li>Create a folder preferably with the same name as your project (in my case PdfRenamer), and browse into it with Windows explorer.</li>
  <li>Right click somewhere in the folder and from the context menu select “Git Create repository here…”. A window pops-up. Make sure that “Make it Bare” is not checked; and press OK.</li>
  <li>Right click somewhere in the folder and from the context menu go to: TortoiseGit &gt; Settings » Git branch » Remote sub-branch. In the “Remote” field enter “origin”, in the URL field enter the git repository address which was highlighted above and is in the form of <code>git@github.com:[username]/[projectname].git</code>; and finally in front of “putty key” provide the address to the SSH private key which we saved earlier in this tutorial, and has the <code>.ppk</code> extension. When finished press the “Add New/Save” button. After that origin should be added to the list of Remotes.</li>
</ol>

<p><img src="http://sinairv.github.io/images/posts/tortoisegitremotesetting.png" alt="TortoiseGit Remote Setting" /></p>

<p><strong>Add files to the project structure.</strong> With git, adding a file to a project structure and having it reflected in the remote repository requires 3 operations: add, commit, and push. The first 2 operations are required for adding the file to the local repository, and the third one reflects the changes to the remote repository. This last operation can be postponed to a later time when you want to push a bundle of changes all at once.</p>

<p>To start, create a <code>Readme.txt</code> file in the root folder. Right click on the newly added file, from the context menu select: TortoiseGit &gt; add; check the files to be added, and press OK. This was the first operation: add. In the new window press “commit …”, provide a meaningful commit message in the new window, and press OK when finished. This was the second operation: commit which reflects the changes to your local repository, the one in your hard-drive. You can push the changes in the next window if you want, however it’s not a good idea to push every local commit to the remote repository (that’s why we are using a DVCS after all).</p>

<p>Before continuing to the push command, let’s talk about some naming conventions in the Git world. With DVCSs such as git you can have different remote repositories which you may choose from to push your changes to. By convention, the default name for the remote repository is “origin”. In our case origin is the remote repository at the GitHub server, for which we manually added the link before. On the other hand, each project may have several branches. Conceptually a branch is another copy of the same project where other features are developed and tested. For example imagine that at a certain stage of development you may decide to add a new feature to your project. You may create a new branch called “test”, develop and test the feature there, and finally merge the changes with the code at the main branch. By convention, the main branch is called “master”.</p>

<p>When it comes to push, you need to know which branch of the code you want to push to which remote repository. In our simple case we want to push the master branch to the origin repository. For this purpose, right click somewhere on the Windows explorer that shows the project root folder, and select: TortoiseGit &gt; Push…. Make sure the name of the branches for local and remote repositories and the name of the remote repository are selected correctly. More importantly make sure that the “Autoload Putty Key” check-box is also checked, and press OK. Next, the TortoiseGit will prompt you for the private-key passphrase. Note that this is not your GitHub account password, this is the passphrase that you chose when creating the private key with Puttygen. After finishing the push operation, check the sources in the project’s GitHub page to make sure the changes have been reflected there. Note that after the first push, the PuTTY authentication agent (Pageant) gets run in the background, so that you won’t need to enter the passphrase any time you want to push to GitHub.</p>

<p><strong>Updating the local repository with the latest changes made by other team members to the remote repository.</strong> Well, there are two solutions. The one that I prefer is using git pull. You can easily find this command in the TortoiseGit’s context menu. The pull command, preserves the history of changes made by different people and makes a final merge afterwards. The other solution is git fetch and rebase. The fetch command only receives the latest changes from the remote repository but does not apply them. The rebase command first applies the remote changes to the repository, then applies your changes. Therefore it always seems that you have made the recent changes, while it may not be true. See this <a href="http://stackoverflow.com/questions/3357122/git-pull-vs-git-fetch-git-rebase">stackoverflow question</a> for a better explanation.</p>

<p><strong>Note:</strong> At any stage, if git complains about connecting through a null proxy, then you will have to remove proxy settings from the global <code>.gitconfig</code> file. For more information see tip 7 on my earlier <a href="http://sinairv.github.io/blog/2012/05/01/how-to-setup-git-for-windows/">post</a></p>

<p>You may also want to see my earlier <a href="http://sinairv.github.io/blog/2012/05/02/using-git-with-codeplex-on-windows/">post</a> that describes using git with <a href="http://www.codeplex.com/">CodePlex</a> on Windows.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Git With CodePlex on Windows]]></title>
    <link href="http://sinairv.github.io/blog/2012/05/02/using-git-with-codeplex-on-windows/"/>
    <updated>2012-05-02T10:50:41+10:00</updated>
    <id>http://sinairv.github.io/blog/2012/05/02/using-git-with-codeplex-on-windows</id>
    <content type="html"><![CDATA[<p>If you’re new to Git and don’t know how to install Git on Windows, read my earlier post: <a href="http://sinairv.github.io/blog/2012/05/01/how-to-setup-git-for-windows/">How to Setup Git for Windows</a></p>

<p>On 21 March 2012, the <a href="http://www.codeplex.com/">CodePlex</a> team <a href="http://blogs.msdn.com/b/codeplex/archive/2012/03/21/git-commit-m-codeplex-now-supports-git.aspx">announced</a> their support for Git.</p>

<p>Creating a project with Git as source control is very easy in CodePlex and is done with a few clicks at no time. Suppose the project name is <code>CodePlexGitTest</code>. In order to make any changes to the project structure you need to clone the project first. This way you will have your own copy of the repository on your hard disk. To do this, the path to the git repository is needed. This can be obtained from the <em>Source Code</em> tab of the project’s CodePlex page, by pressing the <em>Git</em> link/button under <em>“Source Control”</em> section on the right pane, as seen below:</p>

<p><img src="http://sinairv.github.io/images/posts/codeplexgit.png" alt="CodePlex Git settings" /></p>

<p>In order to clone the project, move to the folder that is going to host the project directory. Right click somewhere in the Windows explorer window and choose <em>Git Clone</em>. In the opened window set the <em>“Url”</em> field to the <em>“Clone URL”</em> value above, leave other options unchanged, and press OK. After prompting for your CodePlex user-name and password, it should now create the folder structure for your empty repository (<strong>Note</strong>: in case that git complains about connecting through a <em>null</em> proxy, then you will have to remove proxy settings from the global <code>.gitconfig</code> file. For more information see tip 7 on my earlier <a href="http://sinairv.github.io/blog/2012/05/01/how-to-setup-git-for-windows/">post</a>).</p>

<p>Now that you have the currently empty project structure at your hard-drive, it’s time to add some files to it. Using git, adding a file to a project structure and having it reflected in the remote repository requires 3 operations: <em>add</em>, <em>commit</em>, and <em>push</em>. The first 2 operations are required for adding the file to the local repository, and the third one reflects the changes to the remote repository. This last operation can be postponed to a later time when you want to push a bundle of changes all at once.</p>

<p>To start, create a <code>Readme.txt</code> file in the root folder. Right click on the newly added file, from the context menu select: <em>TortoiseGit &gt; add</em>; check the files to be added, and press OK. This was the first operation: <em>add</em>. In the new window press <em>“commit …”</em>, provide a meaningful commit message in the new window, and press OK when finished. This was the second operation: <em>commit</em> which reflects the changes to your local repository, the one in your hard-drive. You can push the changes in the next window if you want, however it’s not a good idea to push every local commit to the remote repository (that’s why we are using a DVCS after all).</p>

<p>Before continuing to the <em>push</em> command, let’s talk about some naming conventions in the git world. With DVCSs such as git you can have different remote repositories which you may choose from to push your changes to. By convention, the default name for the remote repository is <em>“origin”</em>. In our case origin is the remote repository at the CodePlex server. On the other hand, each project may have several branches. Conceptually a branch is another copy of the same project where other features are developed and tested. For example imagine that at a certain stage of development you may decide to add a new feature to your project. You may create a new branch called <em>“test”</em>, develop and test the feature there, and finally merge the changes with the code at the main branch. By convention, the main branch is called <em>“master”</em>.</p>

<p>When it comes to <em>push</em>, you need to know which branch of the code you want to push to which remote repository. In our simple case we want to push the <em>master</em> branch to the <em>origin</em> repository. For this purpose, right click somewhere on the Windows explorer that shows the project root folder, and select: <em>TortoiseGit &gt; Push…</em>. Make sure the name of the branches for local and remote repositories and the name of the remote repository are selected correctly, and press OK. Enter CodePlex user-name and passwords which are prompted. Now check the sources in the project’s CodePlex site to make sure the changes have been reflected there.</p>

<p>How to update the local repository with the latest changes made by other team members to the remote repository? Well, there are two solutions. The one that I prefer is to use git <em>pull</em>. You can easily find this command in the TortoiseGit’s context menu. The <em>pull</em> command, preserves the history of changes made by different people and makes a final merge afterwards. The other solution is git <em>fetch</em> and <em>rebase</em>. The <em>fetch</em> command only receives the latest changes from the remote repository but does not apply them. The <em>rebase</em> command first applies the remote changes to the repository, then applies your changes. Therefore it always seems that you have made the recent changes, while it may not be true. See this <a href="http://stackoverflow.com/questions/3357122/git-pull-vs-git-fetch-git-rebase">stackoverflow question</a> for a better explanation.</p>

<p>See also:  <br />
<a href="http://sinairv.github.io/blog/2012/05/01/how-to-setup-git-for-windows/">How to Setup Git for Windows</a>  <br />
<a href="http://sinairv.github.io/blog/2012/05/05/using-git-with-github-on-windows/">Using Git With GitHub on Windows</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup Git for Windows]]></title>
    <link href="http://sinairv.github.io/blog/2012/05/01/how-to-setup-git-for-windows/"/>
    <updated>2012-05-01T23:27:40+10:00</updated>
    <id>http://sinairv.github.io/blog/2012/05/01/how-to-setup-git-for-windows</id>
    <content type="html"><![CDATA[<p>These are some easy steps required to setup Git for Windows:</p>

<ol>
  <li>
    <p>Download msysGit from: http://code.google.com/p/msysgit  <br />
I prefer to use the portable version. At the time of this writing there’s no difference between 32 bit and 64 bit versions and the filename for the portable version is: <code>PortableGit-1.7.10-preview20120409.7z</code>. Currently it seems that the development of the project has been moved to <a href="http://github.com/msysgit">GitHub</a>, but the releases are still located in Google Code.</p>
  </li>
  <li>
    <p>Extract the contents in a proper location. I made them into:  <br />
<code>D:\PortableProgs\msysGit</code></p>
  </li>
  <li>
    <p>If you intend to use the git command-line for every git operation simply run <code>git-bash.bat</code> in the root folder of <em>msysGit</em>. This is the old lovely <em>Cygwin</em> command-line.</p>
  </li>
  <li>
    <p>If you don’t intend to use command-line (like me) install <em>TortoiseGit</em>. It is hosted on Google Code:  <br />
http://code.google.com/p/tortoisegit/  <br />
Note that it comes with different releases for 32-bit and 64-bit systems. At the time of this writing the latest version is 1.7.8.0. After installing <em>TortoiseGit</em> you may need to restart Windows, or the Windows explorer process, or none.</p>
  </li>
  <li>
    <p>Right click somewhere on a Windows Explorer window, and from the context menu select: <em>TortoiseGit &gt; Settings</em>. There will be a message-box appearing begging for adjusting the path to <em>msysGit</em>. Click on “Set MSysGit path” button (If you have ever missed this window, or want to change the path to an already existing <em>msysGit</em>, simply go to: <em>TortoiseGit &gt; Settings » the General branch</em>).  <br />
In the field titled as <em>“Git.exe path:”</em> enter the path to the <em>bin</em> folder of the <em>msysGit</em> installation/copy.</p>
  </li>
  <li>
    <p>You don’t have to, but it is highly recommended that before starting any git operations you set some global settings such as your name, email, and AutoCrlf. To this aim in the Windows explorer’s context menu go to: <em>TortoiseGit &gt; Settings » the Git branch</em>. Fill in the fields labelled <em>Name</em> and <em>Email</em> with proper values. Then make sure that <em>AutoCrlf</em> check-box is unchecked, so that you don’t touch every file in order to change their line-endings. Read more about this kind of problem <a href="http://code52.org/line-endings.html">here</a>, and see <a href="http://stackoverflow.com/questions/4181870/git-on-windows-what-do-the-crlf-settings-mean">here</a> to know more what AutoCrlf and SafeCrlf options do for you.</p>
  </li>
  <li>
    <p><strong>[UPDATED on 3 May 2012]</strong> When performing some git operations, git may complain that it cannot connect through a <em>null</em> proxy. It may happen for some versions if in git settings the value for proxy is assigned to an empty string. If this is the case for you, simply remove proxy settings in the global <code>.gitconfig</code> file. To do this, right click somewhere in Windows explorer, go to: <em>TortoiseGit &gt; Settings » The Git Branch » Edit Global .gitconfig button</em>. From there remove the line that assigns proxy, or the whole <code>[http]</code> section if it only contains proxy settings.</p>
  </li>
</ol>

<p>See also:  <br />
<a href="http://sinairv.github.io/blog/2012/05/02/using-git-with-codeplex-on-windows/">Using Git With CodePlex on Windows</a>  <br />
<a href="http://sinairv.github.io/blog/2012/05/05/using-git-with-github-on-windows/">Using Git With GitHub on Windows</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Built My First Qt Application in Visual Studio 2010]]></title>
    <link href="http://sinairv.github.io/blog/2011/07/04/how-i-built-my-first-qt-application-in-visual-studio-2010/"/>
    <updated>2011-07-04T23:10:54+10:00</updated>
    <id>http://sinairv.github.io/blog/2011/07/04/how-i-built-my-first-qt-application-in-visual-studio-2010</id>
    <content type="html"><![CDATA[<p>I downloaded the Qt SDK (offline installer version which was 1.7 GB) from: 
http://qt.nokia.com/downloads</p>

<p>At the time of this writing, the Qt libraries version was 4.7.3.</p>

<p>Then I downloaded the VS-Addin, using the link at the bottom of the downloads page, titled “Qt Visual Studio Add-in”.</p>

<p>After installing both SDK, and the VS-Addin on my system, I started Visual Studio 2010. I tried to create a sample project by selecting: File &gt; New &gt; Project… &gt; Qt4 Projects &gt; Qt Application, and specified proper values for Name and Location. After going through the Qt wizard to the end, I encountered the following error message:</p>

<pre><code>unable to find Qt Build!
To solve this problem specify Qt Build!
</code></pre>

<p>By going to the Qt setup directory, one sees that there are Qt SDKs available for different target platforms. For example I installed Qt in “D:\QtSDK&#8221; and in that directory I see some folders which correspond to different target platforms such as Desktop, Madde, Symbian, and others. An appropriate platform directory should contain a bin folder inside. This is true about Madde, and Symbian, but the Desktop folder is a root for subdirectories related to different Qt versions and C++ compilers. Since I wanted to develop Qt applications with Microsoft Visual C++ for the Windows Desktop platform I went to the following directory which contains the required bin folder: 
D:\QtSDK\Desktop\Qt\4.7.3\msvc2008</p>

<p>For the next step, I had to introduce this directory for the Qt VS-addin. From the main menu, I selected Qt &gt; Qt Options &gt; Qt Versions. I pressed the Add button, and entered “Win 4.7.3” in the  “Version name” field, and entered the above path in the “Path” field, and pressed OK. The path that I specified was added to the gird. Then I made sure that in the Default Qt/Win version, the version that I have just specified (i.e., Win 4.7.3) is selected. I pressed OK, and tried once more with the Qt New Project wizard. This time everything went OK, and I succeeded to create and build my first Qt Application in the VS 2010 environment.</p>

<p>Note: In fact the current Qt binaries are targeted for Visual Studio 2008. I was able to use the binaries (i.e., libs and dlls) because I had also Visual Studio 2008 and the corresponding C++ compiler installed on my machine. Otherwise, I presume that I would need to recompile the sources with the VS-2010 C++ compiler.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Disable Hibernate and Free Some Disk Space in Windows 7]]></title>
    <link href="http://sinairv.github.io/blog/2011/05/26/how-to-disable-hibernate-and-free-some-disk-space-in-windows-7/"/>
    <updated>2011-05-26T23:07:00+10:00</updated>
    <id>http://sinairv.github.io/blog/2011/05/26/how-to-disable-hibernate-and-free-some-disk-space-in-windows-7</id>
    <content type="html"><![CDATA[<p>Run a command prompt as administrator.</p>

<p>Run the following command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">powercfg.exe -h off</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The disk space is freed immediately. To turn it back on run:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">powercfg.exe -h on</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Reference: [<a href="http://helpdeskgeek.com/windows-7/windows-7-delete-hibernation-file-hiberfil-sys/">+</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Include .eps Images With Pdflatex]]></title>
    <link href="http://sinairv.github.io/blog/2011/05/21/how-to-include-eps-images-with-pdflatex/"/>
    <updated>2011-05-21T23:03:15+10:00</updated>
    <id>http://sinairv.github.io/blog/2011/05/21/how-to-include-eps-images-with-pdflatex</id>
    <content type="html"><![CDATA[<p>PdfLaTeX does not support <code>eps</code> files by default. Add the following imports in the beginning:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="k">\usepackage</span><span class="nb">{</span>graphicx<span class="nb">}</span> <span class="c">% already added</span>
</span><span class="line"><span class="k">\usepackage</span><span class="nb">{</span>epstopdf<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After that the <code>includegraphics</code> commands with <code>eps</code> arguments should produce no problems.</p>

<p>Reference: [<a href="http://mactex-wiki.tug.org/wiki/index.php?title=Graphics_inclusion">+</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Snippet for Calculating Mean, Variance, and Standard Deviation]]></title>
    <link href="http://sinairv.github.io/blog/2011/05/15/code-snippet-for-calculating-mean/"/>
    <updated>2011-05-15T22:58:36+10:00</updated>
    <id>http://sinairv.github.io/blog/2011/05/15/code-snippet-for-calculating-mean</id>
    <content type="html"><![CDATA[<p>Here are the methods to calculate mean, variance, and standard deviation of a vector of values. These are put here for easy reference, so that I do not need to rewrite them again (and again (and again)).</p>

<script src="https://gist.github.com/sinairv/2693528.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Helper Method for Performing K-Fold Cross Validation]]></title>
    <link href="http://sinairv.github.io/blog/2011/05/15/a-helper-method-for-performing-k-fold-cross-validation/"/>
    <updated>2011-05-15T22:41:05+10:00</updated>
    <id>http://sinairv.github.io/blog/2011/05/15/a-helper-method-for-performing-k-fold-cross-validation</id>
    <content type="html"><![CDATA[<p>The following method is a utility method for creating the <em>K</em> divisions upon which one is going to perform the <em>K</em>-fold cross validation operation. The input of the method is the length of the training data, and the number <em>K</em>. The output conveys which indices of the training-data is to be put in each division.</p>

<script src="https://gist.github.com/sinairv/2693647.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem With Finding Local Resources in Intellij IDEA]]></title>
    <link href="http://sinairv.github.io/blog/2011/05/10/problem-with-finding-local-resources-in-intellij-idea/"/>
    <updated>2011-05-10T22:33:07+10:00</updated>
    <id>http://sinairv.github.io/blog/2011/05/10/problem-with-finding-local-resources-in-intellij-idea</id>
    <content type="html"><![CDATA[<p>Some classes use external data files which are located in the same directory as the one that the <code>.java</code> file is located, or somewhere nearby which can be easily addressed with a relative path. This happens a lot for me, esp. when I am running open source programs developed by someone else. As an example, imagine a class called <code>SampleClass</code> located in a directory in which there exists a text file with the name of <code>SomeFile.txt</code>. One way to have access to the file is through calling the class-loader’s <code>getResource</code> function:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">URL</span> <span class="n">theURL</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;SomeFile.txt&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">theURL</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I tested this piece of code in <em>NetBeans</em> and it works fine. But not in <em>Intellij IDEA</em>! To solve this (annoying) problem, I needed to add the path of the source directory to <code>classpath</code>. For this purpose I did the following steps in Intellij IDEA 10.0.3 Community Edition:</p>

<ol>
  <li>Right click on the module name and select “Open Module Settings”</li>
  <li>Select “Modules” from the leftmost pane</li>
  <li>Select “Dependencies” tab</li>
  <li>Press “Add…” button and select “1 Single-Entry Module Library…” from the popup menu</li>
  <li>Find and select the “src” folder of your sources.</li>
  <li>Under the “Scope” column, change the scope to “Runtime”</li>
  <li>Press Apply and OK</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Snippet for Dealing With Windows Forms ListView Control in Details Mode]]></title>
    <link href="http://sinairv.github.io/blog/2011/05/09/code-snippet-for-dealing-with-windows-forms-listview-control-in-details-mode/"/>
    <updated>2011-05-09T00:39:37+10:00</updated>
    <id>http://sinairv.github.io/blog/2011/05/09/code-snippet-for-dealing-with-windows-forms-listview-control-in-details-mode</id>
    <content type="html"><![CDATA[<p>I needed a piece of code to manage list-view controllers. I needed to use <code>ListView</code> controls in the details mode, which automatically sort its contents when I click on the header, and also pastes the content in a tabular format when I press <code>Ctrl</code>+<code>C</code> or <code>Ctrl</code>+<code>Insert</code> on it. So I created the following classes. The code that carries out the sorting stuff when the header is clicked is taken from <a href="http://msdn.microsoft.com/en-us/library/ms996467.aspx">this</a> following MSDN article.</p>

<p>So these are the contributions of these pieces of code: 1) Sort <code>ListView</code> items when the column header is clicked, 2) Paste the contents of the <code>ListView</code> control to clipboard in a tabular format, and 3) Provide an easy to use API to append data to a <code>ListView</code> control.</p>

<p>The following gist contains the code to accomplish this. It consists of 3 files. The <code>ListViewColumnSorter.cs</code> file is responsible for the sorting stuff. The <code>ListViewUtils.cs</code> file provides the utility methods for a ListView control. The main methods that perform the job are located in the <code>ListViewUtils</code> class. The two needed methods are <code>InitListView</code> and <code>AppendToListView</code>. And finally the <code>Usage.cs</code> file provides a small demo of the utility methods.</p>

<script src="https://gist.github.com/sinairv/2693729.js"></script>

]]></content>
  </entry>
  
</feed>

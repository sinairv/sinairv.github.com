<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | Sina Iravanian]]></title>
  <link href="http://www.sinairv.com/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://www.sinairv.com/"/>
  <updated>2014-01-27T19:14:54+10:00</updated>
  <id>http://www.sinairv.com/</id>
  <author>
    <name><![CDATA[Sina Iravanian]]></name>
    <email><![CDATA[sina.iravanian@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Make More Refactoring Friendly Data-bindings With C# 5]]></title>
    <link href="http://www.sinairv.com/blog/2012/11/01/how-to-make-more-refactoring-friendly-data-bindings-with-c-number-5/"/>
    <updated>2012-11-01T19:46:29+10:00</updated>
    <id>http://www.sinairv.com/blog/2012/11/01/how-to-make-more-refactoring-friendly-data-bindings-with-c-number-5</id>
    <content type="html"><![CDATA[<p>Imagine that we want to create a <code>Person</code> business object for whose properties we desire a two-way data binding. The source-to-target data-binding can be triggered by implementing <code>INotifyPropertyChanged</code> interface, like this:</p>

<p>```csharp
public class Person : INotifyPropertyChanged
{
    private string _name;
    private double _age;</p>

<pre><code>public string Name 
{
    get
    {
        return _name;
    }

    set
    {
        if (value != _name)
        {
            _name = value;
            OnPropertyChanged("Name");
        }
    }
}

public double Age 
{
    get
    {
        return _age;
    }

    set
    {
        if (_age != value)
        {
            _age = value;
            OnPropertyChanged("Age");
        }
    }
}

public event PropertyChangedEventHandler PropertyChanged;

private void OnPropertyChanged(string propertyName)
{
    if (PropertyChanged != null)
    {
        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    }
} } ```
</code></pre>

<p>See how the setters pass the property name in a <code>string</code>. This is not nice, because whenever we change the property name through refactoring tools, the string value remains untouched and we have to manually change them as well (if we are lucky enough to get notified before run-time). Anyway we had to tolerate them for years&hellip;</p>

<p>C# 5 comes with a nice feature, which is addition of two attributes <code>[CallerFilePath]</code> and <code>[CallerMemberName]</code> in the <code>System.Runtime.CompilerServices</code> namespace. If you decorate an <strong>optional</strong> string parameter of a method with one of these attributes, then the value of that parameter will be replaced with the caller&rsquo;s file name or the caller&rsquo;s member name at runtime, if no explicit value is passed for the optional parameter. They come very handy in logging scenarios, but we can use the latter for making our data-binding code nicer. This is how:</p>

<p>```csharp
public class Person : INotifyPropertyChanged
{
    private string _name;
    private double _age;</p>

<pre><code>public string Name 
{
    get
    {
        return _name;
    }

    set
    {
        if (value != _name)
        {
            _name = value;
            OnPropertyChanged();
        }
    }
}

public double Age 
{
    get
    {
        return _age;
    }

    set
    {
        if (_age != value)
        {
            _age = value;
            OnPropertyChanged();
        }
    }
}

public event PropertyChangedEventHandler PropertyChanged;

private void OnPropertyChanged([CallerMemberName]string propertyName = "")
{
    if (PropertyChanged != null)
    {
        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    }
} } ```
</code></pre>

<p>Now that string constants are removed from the setters we can more freely refactor our code. After being spoiled by automatic properties, this is still a very verbose way of defining properties; however it is much better than before.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Example for C# Dynamic in Action]]></title>
    <link href="http://www.sinairv.com/blog/2012/07/23/an-example-for-c-number-dynamic-in-action/"/>
    <updated>2012-07-23T17:20:53+10:00</updated>
    <id>http://www.sinairv.com/blog/2012/07/23/an-example-for-c-number-dynamic-in-action</id>
    <content type="html"><![CDATA[<p>Recently I was involved with enabling validation for a Windows Forms form containing several pages shown through a tree view. There were one user control defined for each page, therefore whenever a node in tree-view got activated, an instance of that user-control were shown. The user-controls did not have a common user-defined parent base-class or interface. The author of the existing code had defined a <code>Save</code> method in each control separately which performed updating data with values entered in the forms.</p>

<p>First, I changed all <code>void Save()</code> methods to <code>bool Save()</code>, and performed the validation stuff in each control separately. Then in the parent form, I created an array of <code>Control</code>s, so that I could loop through them, and call their <code>Save</code> method. But wait, <code>Save</code> is not inherited from any base-class or interface, so there&rsquo;s no polymorphism at hand. How can I call them through references of type <code>Control</code>?</p>

<p>Well honestly, the best solution would be adding a new interface to the project, say <code>ISavableControl</code> or something, add the <code>Save</code> method to it, and let the controls implement that interface. But I wanted to make a quick fix to the problem without adding new files and types to the code. Here C#&rsquo;s <code>dynamic</code> comes into action.</p>

<p>Using <code>dynamic</code> keyword, one postpones binding methods, properties, and fields to run-time. In our scenario we know that the user-controls each have a method called <code>Save</code>, which is not derived from a parent. Without <code>dynamic</code>, I would need to have a reference explicitly from each user control&rsquo;s type, and I would have to call them one by one, as in:</p>

<p><code>csharp
bool succeeded = false;
succeeded = userControl1.Save();
succeeded = succeeded || userControl2.Save();
succeeded = succeeded || userControl3.Save();
// ...
succeeded = succeeded || userControln.Save();
</code></p>

<p>However using <code>dynamic</code> keyword, life gets a lot easier:</p>

<p>```csharp
// objects are not inherited from a base class or interface,
// therefore we cannot call Save using polymorphism
bool succeeded = false;
foreach(var ctrl in controlsArray)
{
    dynamic dynCtrl = ctrl;
    succeeded = succeeded || dynCtrl.Save();
}</p>

<p>// do something with the value of succeeded
```</p>

<p>Take care that binding the <code>Save</code> methods to controls happen at runtime. Therefore if a control does not implement a <code>Save</code> method, or if another one misspells <code>Save</code>, as say <code>Svae</code>, you will get no hints at compile time. So, try to avoid this style of coding, unless you have good reasons for doing so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Snippet for Calculating Mean, Variance, and Standard Deviation]]></title>
    <link href="http://www.sinairv.com/blog/2011/05/15/code-snippet-for-calculating-mean/"/>
    <updated>2011-05-15T22:58:36+10:00</updated>
    <id>http://www.sinairv.com/blog/2011/05/15/code-snippet-for-calculating-mean</id>
    <content type="html"><![CDATA[<p>Here are the methods to calculate mean, variance, and standard deviation of a vector of values. These are put here for easy reference, so that I do not need to rewrite them again (and again (and again)).</p>

<script src="https://gist.github.com/sinairv/2693528.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Helper Method for Performing K-Fold Cross Validation]]></title>
    <link href="http://www.sinairv.com/blog/2011/05/15/a-helper-method-for-performing-k-fold-cross-validation/"/>
    <updated>2011-05-15T22:41:05+10:00</updated>
    <id>http://www.sinairv.com/blog/2011/05/15/a-helper-method-for-performing-k-fold-cross-validation</id>
    <content type="html"><![CDATA[<p>The following method is a utility method for creating the <em>K</em> divisions upon which one is going to perform the <em>K</em>-fold cross validation operation. The input of the method is the length of the training data, and the number <em>K</em>. The output conveys which indices of the training-data is to be put in each division.</p>

<script src="https://gist.github.com/sinairv/2693647.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Snippet for Dealing With Windows Forms ListView Control in Details Mode]]></title>
    <link href="http://www.sinairv.com/blog/2011/05/09/code-snippet-for-dealing-with-windows-forms-listview-control-in-details-mode/"/>
    <updated>2011-05-09T00:39:37+10:00</updated>
    <id>http://www.sinairv.com/blog/2011/05/09/code-snippet-for-dealing-with-windows-forms-listview-control-in-details-mode</id>
    <content type="html"><![CDATA[<p>I needed a piece of code to manage list-view controllers. I needed to use <code>ListView</code> controls in the details mode, which automatically sort its contents when I click on the header, and also pastes the content in a tabular format when I press <code>Ctrl</code>+<code>C</code> or <code>Ctrl</code>+<code>Insert</code> on it. So I created the following classes. The code that carries out the sorting stuff when the header is clicked is taken from <a href="http://msdn.microsoft.com/en-us/library/ms996467.aspx">this</a> following MSDN article.</p>

<p>So these are the contributions of these pieces of code: 1) Sort <code>ListView</code> items when the column header is clicked, 2) Paste the contents of the <code>ListView</code> control to clipboard in a tabular format, and 3) Provide an easy to use API to append data to a <code>ListView</code> control.</p>

<p>The following gist contains the code to accomplish this. It consists of 3 files. The <code>ListViewColumnSorter.cs</code> file is responsible for the sorting stuff. The <code>ListViewUtils.cs</code> file provides the utility methods for a ListView control. The main methods that perform the job are located in the <code>ListViewUtils</code> class. The two needed methods are <code>InitListView</code> and <code>AppendToListView</code>. And finally the <code>Usage.cs</code> file provides a small demo of the utility methods.</p>

<script src="https://gist.github.com/sinairv/2693729.js"></script>

]]></content>
  </entry>
  
</feed>

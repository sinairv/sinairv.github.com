<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Sina&#39;s Blog</title>
    <link>https://sinairv.github.io/categories/c#/</link>
    <description>Recent content in C# on Sina&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Oct 2015 23:33:40 +1100</lastBuildDate>
    
	<atom:link href="https://sinairv.github.io/categories/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mock Entity Framework DbSet with NSubstitute</title>
      <link>https://sinairv.github.io/blog/2015/10/04/mock-entity-framework-dbset-with-nsubstitute/</link>
      <pubDate>Sun, 04 Oct 2015 23:33:40 +1100</pubDate>
      
      <guid>https://sinairv.github.io/blog/2015/10/04/mock-entity-framework-dbset-with-nsubstitute/</guid>
      <description>The source code for this post is on GitHub.
When it comes to mocking a DbSet to test various read and write operations things may get a little bit tricky. Mocking a DbSet for a write operation (Add, Update, or Remove) is quite straightforward. But testing a synchronous read operation requires mocking the whole IQueryable interface. Even more trickier than that is testing an asynchronous read operation which requires mocking an IDbAsyncQueryProvider interface.</description>
    </item>
    
    <item>
      <title>Handy Extensions for INotifyPropertyChanged</title>
      <link>https://sinairv.github.io/blog/2015/01/15/handy-extensions-for-inotifypropertychanged/</link>
      <pubDate>Thu, 15 Jan 2015 00:22:39 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2015/01/15/handy-extensions-for-inotifypropertychanged/</guid>
      <description>I recently created a library that contains some handy extensions for INotifyPropertyChanged interface (aka INPC). To start using the library, add the following to the top of your C# code:
using NotifyPropertyChangedExtensions;  How to easily raise INPC in a refactor friendly way public class MyClass : INotifyPropertyChanged { private int _number; public int Number { get { return _number; } set { if(_number != value) { _number = value; this.</description>
    </item>
    
    <item>
      <title>Syntax Highlighter for Windows Forms Rich Text Box</title>
      <link>https://sinairv.github.io/blog/2014/12/01/syntax-highlighter-for-windows-forms-rich-text-box/</link>
      <pubDate>Mon, 01 Dec 2014 18:18:48 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2014/12/01/syntax-highlighter-for-windows-forms-rich-text-box/</guid>
      <description>Years ago I created a tool called Code4Public to convert source code into HTML called. I was using this tool to put nice code snippets in the blog I used to maintain at that time. The tool is able to get the code, apply syntax highlighting to it based on the syntax of the language selected, and then create HTML based on the theme selected (e.g., MSDN theme). I didn&amp;rsquo;t assign more time on making the tool better and better, as better ways of doing the same task were emerging, and also other by-products of the tool were becoming more interesting at the time; e.</description>
    </item>
    
    <item>
      <title>How to make more refactoring friendly data-bindings with C# 5</title>
      <link>https://sinairv.github.io/blog/2012/11/01/how-to-make-more-refactoring-friendly-data-bindings-with-c#-5/</link>
      <pubDate>Thu, 01 Nov 2012 19:46:29 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2012/11/01/how-to-make-more-refactoring-friendly-data-bindings-with-c#-5/</guid>
      <description>Imagine that we want to create a Person business object for whose properties we desire a two-way data binding. The source-to-target data-binding can be triggered by implementing INotifyPropertyChanged interface, like this:
public class Person : INotifyPropertyChanged { private string _name; private double _age; public string Name { get { return _name; } set { if (value != _name) { _name = value; OnPropertyChanged(&amp;quot;Name&amp;quot;); } } } public double Age { get { return _age; } set { if (_age !</description>
    </item>
    
    <item>
      <title>An example for C# dynamic in action</title>
      <link>https://sinairv.github.io/blog/2012/07/23/an-example-for-c#-dynamic-in-action/</link>
      <pubDate>Mon, 23 Jul 2012 17:20:53 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2012/07/23/an-example-for-c#-dynamic-in-action/</guid>
      <description>Recently I was involved with enabling validation for a Windows Forms form containing several pages shown through a tree view. There were one user control defined for each page, therefore whenever a node in tree-view got activated, an instance of that user-control were shown. The user-controls did not have a common user-defined parent base-class or interface. The author of the existing code had defined a Save method in each control separately which performed updating data with values entered in the forms.</description>
    </item>
    
    <item>
      <title>Code Snippet for Calculating Mean, Variance, and Standard Deviation</title>
      <link>https://sinairv.github.io/blog/2011/05/15/code-snippet-for-calculating-mean-variance-and-standard-deviation/</link>
      <pubDate>Sun, 15 May 2011 22:58:36 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2011/05/15/code-snippet-for-calculating-mean-variance-and-standard-deviation/</guid>
      <description>Here are the methods to calculate mean, variance, and standard deviation of a vector of values. These are put here for easy reference, so that I do not need to rewrite them again (and again (and again)).
 </description>
    </item>
    
    <item>
      <title>A Helper Method for Performing K-Fold Cross Validation</title>
      <link>https://sinairv.github.io/blog/2011/05/15/a-helper-method-for-performing-k-fold-cross-validation/</link>
      <pubDate>Sun, 15 May 2011 22:41:05 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2011/05/15/a-helper-method-for-performing-k-fold-cross-validation/</guid>
      <description>The following method is a utility method for creating the K divisions upon which one is going to perform the K-fold cross validation operation. The input of the method is the length of the training data, and the number K. The output conveys which indices of the training-data is to be put in each division.
 </description>
    </item>
    
    <item>
      <title>Code Snippet for Dealing with Windows Forms ListView control in details mode</title>
      <link>https://sinairv.github.io/blog/2011/05/09/code-snippet-for-dealing-with-windows-forms-listview-control-in-details-mode/</link>
      <pubDate>Mon, 09 May 2011 00:39:37 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2011/05/09/code-snippet-for-dealing-with-windows-forms-listview-control-in-details-mode/</guid>
      <description>I needed a piece of code to manage list-view controllers. I needed to use ListView controls in the details mode, which automatically sort its contents when I click on the header, and also pastes the content in a tabular format when I press Ctrl+C or Ctrl+Insert on it. So I created the following classes. The code that carries out the sorting stuff when the header is clicked is taken from this following MSDN article.</description>
    </item>
    
    <item>
      <title>Code Snippet for Trimming Strings of White-space and Control Characters</title>
      <link>https://sinairv.github.io/blog/2011/03/02/code-snippet-for-trimming-strings-of-white-space-and-control-characters/</link>
      <pubDate>Wed, 02 Mar 2011 00:07:00 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2011/03/02/code-snippet-for-trimming-strings-of-white-space-and-control-characters/</guid>
      <description>The following method trims the given string of both white-space characters and control characters, and its rather fast!
 </description>
    </item>
    
    <item>
      <title>Code Snippet for Determining How Two Intervals Overlap</title>
      <link>https://sinairv.github.io/blog/2010/08/09/code-snippet-for-determining-how-two-intervals-overlap/</link>
      <pubDate>Mon, 09 Aug 2010 23:45:00 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2010/08/09/code-snippet-for-determining-how-two-intervals-overlap/</guid>
      <description>The following pieces of code help figure out how two intervals overlap, and provides helper methods to represent them in a way that is useful for debugging purposes. This job is quite easy to accomplish, but since I&amp;rsquo;ve written it too many times from scratch, I put them in the following gist.
The IntervalOverlapKinds.cs file defines the IntervalOverlapKinds enumeration. The interval detection is carried out in the static methods of the IntervalOverlap class.</description>
    </item>
    
    <item>
      <title>Code Snippet for Representing Strings with All Their Characters Visible</title>
      <link>https://sinairv.github.io/blog/2010/08/08/code-snippet-for-representing-strings-with-all-their-characters-visible/</link>
      <pubDate>Sun, 08 Aug 2010 23:55:20 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2010/08/08/code-snippet-for-representing-strings-with-all-their-characters-visible/</guid>
      <description>This piece of code is useful for debugging purposes or working on string processing algorithms. There are times, that you need to see all the characters of a string including invisible characters. This little method may help:
 </description>
    </item>
    
    <item>
      <title>A Code Snippet for Searching and Highlighting a token or string in a RichTextBox</title>
      <link>https://sinairv.github.io/blog/2010/08/08/a-code-snippet-for-searching-and-highlighting-a-token-or-string-in-a-richtextbox/</link>
      <pubDate>Sun, 08 Aug 2010 21:28:07 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2010/08/08/a-code-snippet-for-searching-and-highlighting-a-token-or-string-in-a-richtextbox/</guid>
      <description>Suppose that you intend to find a string or a token (i.e., whole word, instead of a substring) and change their color in some Windows Forms RichTextBox. The following code snippets will help. The FindStringAndSetColor method looks for instances of an arbitrary string in the contents of the RichTextBox, while the FindTokenAndSetColor method looks for whole words (tokens).
 </description>
    </item>
    
    <item>
      <title>One reason to prefer readonly to const in C#</title>
      <link>https://sinairv.github.io/blog/2010/04/21/one-reason-to-prefer-readonly-to-const-in-c/</link>
      <pubDate>Wed, 21 Apr 2010 14:19:38 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2010/04/21/one-reason-to-prefer-readonly-to-const-in-c/</guid>
      <description>First off, let&amp;rsquo;s talk about what&amp;rsquo;s going on in C# compiler when you use const or readonly in your field definitions. The const qualifier can be used with primitive data types, and strings only. When used, the value assigned to a const field, is inserted directly in all its references in the generated IL code. This is true about other assemblies too. Other assemblies that refer to that const field, are compiled as if they have used directly the value itself.</description>
    </item>
    
    <item>
      <title>Assigning values to private fields using reflection</title>
      <link>https://sinairv.github.io/blog/2010/03/06/assigning-values-to-private-fields-using-reflection/</link>
      <pubDate>Sat, 06 Mar 2010 14:19:38 +1000</pubDate>
      
      <guid>https://sinairv.github.io/blog/2010/03/06/assigning-values-to-private-fields-using-reflection/</guid>
      <description>Suppose that you have a class with various non-public fields, e.g., the class named ClassToTest below servers as a good example.
public class ClassToTest { public int SomeNumber { get; set; } private int m_somePrivateProperty { get; set; } private int m_somePrivateVar; private static int s_someStaticNumber; }  And suppose that we desire to assign some value to the private variable m_somePrivateVar, and the private property m_somePrivateProperty. The approach is to iterate through the fields of the ClassToTest type to find the desired field.</description>
    </item>
    
  </channel>
</rss>
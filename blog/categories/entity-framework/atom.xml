<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Entity Framework | Sina Iravanian]]></title>
  <link href="http://sinairv.github.io/blog/categories/entity-framework/atom.xml" rel="self"/>
  <link href="http://sinairv.github.io/"/>
  <updated>2016-11-24T16:15:28+11:00</updated>
  <id>http://sinairv.github.io/</id>
  <author>
    <name><![CDATA[Sina Iravanian]]></name>
    <email><![CDATA[sina.iravanian@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mock Entity Framework DbSet With NSubstitute]]></title>
    <link href="http://sinairv.github.io/blog/2015/10/04/mock-entity-framework-dbset-with-nsubstitute/"/>
    <updated>2015-10-04T23:33:40+11:00</updated>
    <id>http://sinairv.github.io/blog/2015/10/04/mock-entity-framework-dbset-with-nsubstitute</id>
    <content type="html"><![CDATA[<p>The source code for this post is on <a href="https://github.com/sinairv/MockEfDbSetWithNSubstitute">GitHub</a>.</p>

<p>When it comes to mocking a <code>DbSet</code> to test various read and write operations things may get a little bit tricky. Mocking a <code>DbSet</code> for a write operation (<code>Add</code>, <code>Update</code>, or <code>Remove</code>) is quite straightforward. But testing a synchronous read operation requires mocking the whole <code>IQueryable</code> interface. Even more trickier than that is testing an asynchronous read operation which requires mocking an <code>IDbAsyncQueryProvider</code> interface. <a href="https://msdn.microsoft.com/en-au/data/dn314429.aspx">Here</a> is a very good article that demonstrates how to work around these difficulties using <a href="https://github.com/Moq/moq4">Moq</a>. This blog post shows how to achieve the same thing using <a href="http://nsubstitute.github.io/">NSubstitute</a>.</p>

<p>Mocking a <code>DbSet</code> for a write operation is quite straightforward:</p>

<p>```csharp
var mockSet = Substitute.For&lt;DbSet<person>&gt;();
var mockContext = Substitute.For<ipeopledbcontext>();
mockContext.People.Returns(mockSet);
var service = new PeopleService(mockContext);</ipeopledbcontext></person></p>

<p>// Act
service.AddPersonAsync(new Person { FirstName = “John”, LastName = “Doe” });</p>

<p>// Assert
mockSet.Received(1).Add(Arg.Any<person>());
mockContext.Received(1).SaveChangesAsync();
```</person></p>

<p>As seen above mocking the <code>DbSet</code> is as easy as one single call to <code>Substitute.For&lt;DbSet&lt;T&gt;&gt;()</code>.</p>

<p>However mocking a <code>DbSet</code> for a synchronous read operation needs a little bit more work. It needs to mock the whole <code>IQueryable</code> interface:</p>

<p>```csharp
var data = new List<person> 
{ 
    new Person { Id = 1, FirstName = "BBB" }, 
    new Person { Id = 2, FirstName = "ZZZ" }, 
    new Person { Id = 3, FirstName = "AAA" }, 
}.AsQueryable();</person></p>

<p>// create a mock DbSet exposing both DbSet and IQueryable interfaces for setup
var mockSet = Substitute.For&lt;DbSet<person>, IQueryable<person>&gt;();</person></person></p>

<p>// setup all IQueryable methods using what you have from “data”
((IQueryable<person>)mockSet).Provider.Returns(data.Provider);
((IQueryable<person>)mockSet).Expression.Returns(data.Expression);
((IQueryable<person>)mockSet).ElementType.Returns(data.ElementType);
((IQueryable<person>)mockSet).GetEnumerator().Returns(data.GetEnumerator());</person></person></person></person></p>

<p>// do the wiring between DbContext and DbSet
var mockContext = Substitute.For<ipeopledbcontext>();
mockContext.People.Returns(mockSet);
var service = new PeopleService(mockContext);</ipeopledbcontext></p>

<p>// Act
var people = service.GetAllPeople();</p>

<p>// Assert
Assert.That(people.Length, Is.EqualTo(3));
Assert.That(people[0].FirstName, Is.EqualTo(“BBB”));
Assert.That(people[1].FirstName, Is.EqualTo(“ZZZ”));
Assert.That(people[2].FirstName, Is.EqualTo(“AAA”));
```</p>

<p>Mocking a <code>DbSet</code> for an asynchronous read operation requires much more work and a bunch of extra classes. <a href="https://msdn.microsoft.com/en-au/data/dn314429.aspx">This article</a> lists the required extra classes. To name add <a href="https://github.com/sinairv/MockEfDbSetWithNSubstitute/blob/master/MockEfDbSet.Test/TestUtils/TestDbAsyncEnumerable.cs"><code>TestDbAsyncEnumerable</code></a>, <a href="https://github.com/sinairv/MockEfDbSetWithNSubstitute/blob/master/MockEfDbSet.Test/TestUtils/TestDbAsyncEnumerator.cs"><code>TestDbAsyncEnumerator</code></a>, and <a href="https://github.com/sinairv/MockEfDbSetWithNSubstitute/blob/master/MockEfDbSet.Test/TestUtils/TestDbAsyncQueryProvider.cs"><code>TestDbAsyncQueryProvider</code></a> classes to your test project. This is how you’d be able to mock <code>DbSet</code> for asynchronous read operations:</p>

<p>```csharp
var data = new List<person> 
{ 
    new Person { Id = 1, FirstName = "BBB" }, 
    new Person { Id = 2, FirstName = "ZZZ" }, 
    new Person { Id = 3, FirstName = "AAA" }, 
}.AsQueryable();</person></p>

<p>// create a mock DbSet exposing both DbSet, IQueryable, and IDbAsyncEnumerable interfaces for setup
var mockSet = Substitute.For&lt;DbSet<person>, IQueryable<person>, IDbAsyncEnumerable<person>&gt;();</person></person></person></p>

<p>// setup all IQueryable and IDbAsyncEnumerable methods using what you have from “data”
// the setup below is a bit different from the test above
((IDbAsyncEnumerable<person>)mockSet).GetAsyncEnumerator()
    .Returns(new TestDbAsyncEnumerator<person>(data.GetEnumerator()));
((IQueryable<person>)mockSet).Provider.Returns(new TestDbAsyncQueryProvider<person>(data.Provider));
((IQueryable<person>)mockSet).Expression.Returns(data.Expression);
((IQueryable<person>)mockSet).ElementType.Returns(data.ElementType);
((IQueryable<person>)mockSet).GetEnumerator().Returns(data.GetEnumerator());</person></person></person></person></person></person></person></p>

<p>// do the wiring between DbContext and DbSet
var mockContext = Substitute.For<ipeopledbcontext>();
mockContext.People.Returns(mockSet);
var service = new PeopleService(mockContext);</ipeopledbcontext></p>

<p>// Act
var people = await service.GetAllPeopleAsync();</p>

<p>// Assert
Assert.That(people.Length, Is.EqualTo(3));
```</p>

<p>The amount of code per unit test seems a little bit too much. So I created a utility method that creates the mock <code>DbSet</code>:</p>

<p>```csharp
public static class NSubstituteUtils
{
    public static DbSet<t> CreateMockDbSet<t>(IEnumerable<t> data = null)
        where T: class
    {
        var mockSet = Substitute.For&lt;DbSet<t>, IQueryable<t>, IDbAsyncEnumerable<t>&gt;();</t></t></t></t></t></t></p>

<pre><code>    if (data != null)
    {
        var queryable = data.AsQueryable();

        // setup all IQueryable and IDbAsyncEnumerable methods using what you have from "data"
        // the setup below is a bit different from the test above
        ((IDbAsyncEnumerable&lt;T&gt;) mockSet).GetAsyncEnumerator()
            .Returns(new TestDbAsyncEnumerator&lt;T&gt;(queryable.GetEnumerator()));
        ((IQueryable&lt;T&gt;) mockSet).Provider.Returns(new TestDbAsyncQueryProvider&lt;T&gt;(queryable.Provider));
        ((IQueryable&lt;T&gt;) mockSet).Expression.Returns(queryable.Expression);
        ((IQueryable&lt;T&gt;) mockSet).ElementType.Returns(queryable.ElementType);
        ((IQueryable&lt;T&gt;) mockSet).GetEnumerator().Returns(queryable.GetEnumerator());
    }

    return mockSet;
} } ``` 
</code></pre>

<p>Exploiting this, the unit test code would become shorter and more readable:</p>

<p>```csharp
var data = new List<person> 
{ 
    new Person { Id = 1, FirstName = "BBB" }, 
    new Person { Id = 2, FirstName = "ZZZ" }, 
    new Person { Id = 3, FirstName = "AAA" }, 
};</person></p>

<p>var mockSet = NSubstituteUtils.CreateMockDbSet(data);
var mockContext = Substitute.For<ipeopledbcontext>();
mockContext.People.Returns(mockSet);
var service = new PeopleService(mockContext);</ipeopledbcontext></p>

<p>// Act
var secondPerson = await service.GetPersonAsync(2);</p>

<p>// Assert
Assert.That(secondPerson.Id, Is.EqualTo(2));
```</p>

<p>The source code for this post is accessible from <a href="https://github.com/sinairv/MockEfDbSetWithNSubstitute">here</a>.</p>
]]></content>
  </entry>
  
</feed>

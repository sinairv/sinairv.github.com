<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | Sina Iravanian]]></title>
  <link href="http://sinairv.github.io/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://sinairv.github.io/"/>
  <updated>2015-01-22T00:34:16+10:00</updated>
  <id>http://sinairv.github.io/</id>
  <author>
    <name><![CDATA[Sina Iravanian]]></name>
    <email><![CDATA[sina.iravanian@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handy Extensions for INotifyPropertyChanged]]></title>
    <link href="http://sinairv.github.io/blog/2015/01/15/handy-extensions-for-inotifypropertychanged/"/>
    <updated>2015-01-15T00:22:39+10:00</updated>
    <id>http://sinairv.github.io/blog/2015/01/15/handy-extensions-for-inotifypropertychanged</id>
    <content type="html"><![CDATA[<p>I recently created a <a href="https://github.com/sinairv/INPC-Extensions">library</a> that contains some handy extensions for <code>INotifyPropertyChanged</code> interface (aka INPC). To start using the library, add the following to the top of your C# code:</p>

<p><code>csharp
using NotifyPropertyChangedExtensions;
</code></p>

<h4 id="how-to-easily-raise-inpc-in-a-refactor-friendly-way">How to easily raise INPC in a refactor friendly way</h4>

<p>```csharp
public class MyClass : INotifyPropertyChanged
{
    private int _number;</p>

<pre><code>public int Number
{
    get { return _number; }
    set 
    { 
        if(_number != value)
        {
            _number = value; 
            this.RaisePropertyChanged(() =&gt; Number); 
        }
    }
}

public event PropertyChangedEventHandler PropertyChanged; } ```
</code></pre>

<h4 id="how-to-easily-handle-listen-to-inpc-in-a-refactor-friendly-way">How to easily handle (listen to) INPC in a refactor friendly way</h4>

<p>```csharp
MyClass myObject = &hellip;;</p>

<p>myObject.HandleOnPropertyChanged(src =&gt; src.Number, sender =&gt;
    {
        Console.WriteLine(&ldquo;Number changed to {0}&rdquo;, sender.Number);
    });
```</p>

<h4 id="how-to-do-one-way-binding-from-a-class-that-implements-inpc">How to do one-way binding from a class that implements INPC</h4>

<p>```csharp
var source = new MyClass();
var target = new TargetClass();</p>

<p>source.BindProperty(src =&gt; src.Number, target, t =&gt; t.Num);</p>

<p>source.Number = 10;
Console.WriteLine(target.Num); // 10
```</p>

<p>You can negate a boolean property while binding it. I use it a lot and find it very handy.</p>

<p>```csharp
source.BindProperty(src =&gt; src.IsActive, target, t =&gt; !t.IsDeleted);</p>

<p>source.IsActive = false;
Console.WriteLine(target.IsDeleted); // True
```</p>

<p>You can bind primitive data-types in source class to <code>Nullable</code> primitive data-types in the target class, and vice versa. </p>

<p><code>csharp
source.BindProperty(src =&gt; src.Number, target, t =&gt; t.NullableNumber);
</code></p>

<p>What happens if source is <code>null</code>, and the target is not <code>Nullable</code>? </p>

<p>The default behavior is to update target with default value of that type:</p>

<p>```csharp
target.Number = 10;
source.BindProperty(src =&gt; src.NullableNumber, target, t =&gt; t.Number);</p>

<p>source.NullableNumber = null;
Console.WriteLine(target.Number); // 0
```</p>

<p>You can also choose not to update target if source becomes <code>null</code>:</p>

<p>```csharp
target.Number = 10;
source.BindProperty(src =&gt; src.NullableNumber, target, t =&gt; t.Number, 
    BindPropertyOptions.DontUpdateWhenSourceIsNullAndTargetIsNotNullable);</p>

<p>source.NullableNumber = null;
Console.WriteLine(target.Number); // still 10
```</p>

<h4 id="how-to-find-more-information-about-this-library">How to find more information about this library?</h4>

<p>At the moment the best way to find out how this library works is by reading the unit tests or at least their titles.</p>

<p><a href="https://github.com/sinairv/INPC-Extensions">INPC-Extensions</a> is now hosted in GitHub and is licensed under MIT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntax Highlighter for Windows Forms Rich Text Box]]></title>
    <link href="http://sinairv.github.io/blog/2014/12/01/syntax-highlighter-for-windows-forms-rich-text-box/"/>
    <updated>2014-12-01T18:18:48+10:00</updated>
    <id>http://sinairv.github.io/blog/2014/12/01/syntax-highlighter-for-windows-forms-rich-text-box</id>
    <content type="html"><![CDATA[<p>Years ago I created a tool called <a href="http://code4public.codeplex.com">Code4Public</a> to convert source code into HTML called. I was using this tool to put nice code snippets in the blog I used to maintain at that time. The tool is able to get the code, apply syntax highlighting to it based on the syntax of the language selected, and then create HTML based on the theme selected (e.g., MSDN theme). I didn&rsquo;t assign more time on making the tool better and better, as better ways of doing the same task were emerging, and also other by-products of the tool were becoming more interesting at the time; e.g., <a href="https://github.com/sinairv/YAXLib">YAXLib</a> was a little by-product of Code4Public used to store settings, themes and language syntaxes in XML files.</p>

<p>This post is to introduce yet another by-product of Code4Public: <a href="https://github.com/sinairv/WinFormsSyntaxHighlighter">WinFormsSyntaxHighlighter</a>. This library enables syntax highlighting on a <code>RichTextBox</code> based on patterns that the developer defines.</p>

<p>The syntax highlighter hooks into <code>RichTextBox</code> events in the constructor.</p>

<p><code>csharp
var syntaxHighlighter = new SyntaxHighlighter(theRichTextBox);
</code></p>

<p>That&rsquo;s it. Now I need to define patterns and colors. For example I want to see <code>for</code>, <code>foreach</code>, <code>int</code> and <code>var</code> in blue:</p>

<p><code>csharp
// 1st set of keywords; I'd like to see them in Blue
syntaxHighlighter.AddPattern(
    new PatternDefinition("for", "foreach", "int", "var"), 
    new SyntaxStyle(Color.Blue));
</code></p>

<p>I can also define whether I want to see a pattern in <em>bold</em> or <em>italics</em>. For example I want to see <code>public</code>, <code>partial</code>, <code>class</code>, and <code>void</code> in bold navy but not italics. I want the match these words case-insensitively, so that <code>PuBlIc</code> will be shown in navy blue as well. Note that this is an imaginary syntax for demonstration purposes only:</p>

<p><code>csharp
// 2nd set of keywords; I'd like to see them in bold Navy, and they must be case insensitive
syntaxHighlighter.AddPattern(
    new CaseInsensitivePatternDefinition("public", "partial", "class", "void"), 
    new SyntaxStyle(Color.Navy, bold: true, italic: false));
</code></p>

<p>I can also define the patterns directly with regular expression:</p>

<p><code>csharp
// numbers; I'd like to see them in purple
syntaxHighlighter.AddPattern(
    new PatternDefinition(@"\d+\.\d+|\d+"), 
    new SyntaxStyle(Color.Purple));
</code></p>

<p>Since the input string is partitioned by the patterns defined in the order of their definition, they must be added in the proper order. E.g., I want to see numbers in purple, but not those numbers inside a comment or inside a string. So the pattern definition for a comment block must be added first, then the pattern for string literal, and at last the pattern for numbers. The following is a more complete example from the beginning to the end.</p>

<p>```csharp
var syntaxHighlighter = new SyntaxHighlighter(theRichTextBox);</p>

<p>// That&rsquo;s it. Now tell me how you&rsquo;d like to see what&hellip;</p>

<p>// multi-line comments; I&rsquo;d like to see them in dark-sea-green and italic
syntaxHighlighter.AddPattern(
    new PatternDefinition(new Regex(@&rdquo;/*(.|[\r\n])*?*/&rdquo;, 
        RegexOptions.Multiline | RegexOptions.Compiled)), 
    new SyntaxStyle(Color.DarkSeaGreen, bold: false, italic: true));</p>

<p>// singlie-line comments; I&rsquo;d like to see them in Green and italic
syntaxHighlighter.AddPattern(
    new PatternDefinition(new Regex(@&rdquo;//.*?$&rdquo;, 
        RegexOptions.Multiline | RegexOptions.Compiled)), 
    new SyntaxStyle(Color.Green, bold: false, italic: true));</p>

<p>// double quote strings; I&rsquo;d like to see them in Red
syntaxHighlighter.AddPattern(
    new PatternDefinition(@&rdquo;"&rdquo;([^&rdquo;&rdquo;]|"&rdquo;"&rdquo;)+"&rdquo;&rdquo;), 
    new SyntaxStyle(Color.Red));</p>

<p>// single quote strings; I&rsquo;d like to see them in Salmon 
syntaxHighlighter.AddPattern(
    new PatternDefinition(@&rdquo;'([^&rsquo;]|'')+'&rdquo;), 
    new SyntaxStyle(Color.Salmon));</p>

<p>// 1st set of keywords; I&rsquo;d like to see them in Blue
syntaxHighlighter.AddPattern(
    new PatternDefinition(&ldquo;for&rdquo;, &ldquo;foreach&rdquo;, &ldquo;int&rdquo;, &ldquo;var&rdquo;), 
    new SyntaxStyle(Color.Blue));</p>

<p>// 2nd set of keywords; I&rsquo;d like to see them in bold Navy, and they must be case insensitive
syntaxHighlighter.AddPattern(
    new CaseInsensitivePatternDefinition(&ldquo;public&rdquo;, &ldquo;partial&rdquo;, &ldquo;class&rdquo;, &ldquo;void&rdquo;), 
    new SyntaxStyle(Color.Navy, true, false));</p>

<p>// numbers; I&rsquo;d like to see them in purple
syntaxHighlighter.AddPattern(
    new PatternDefinition(@&rdquo;\d+.\d+|\d+&rdquo;), 
    new SyntaxStyle(Color.Purple));</p>

<p>// operators; I&rsquo;d like to see them in Brown
syntaxHighlighter.AddPattern(
    new PatternDefinition(&ldquo;+&rdquo;, &ldquo;-&ldquo;, &ldquo;&gt;&rdquo;, &ldquo;&lt;&rdquo;, &ldquo;&amp;&rdquo;, &ldquo;|&rdquo;), 
    new SyntaxStyle(Color.Brown));
``` </p>

<p>Please also note that, nobody can model a whole language like C# or Java with regular expressions, because these languages are not regular. So this tool is by no means a complete and error-free way of modeling languages. Use this just for simple key-word matching or pattern matching and coloring them as you like; but don&rsquo;t expect too much.</p>

<p><a href="https://github.com/sinairv/WinFormsSyntaxHighlighter">WinFormsSyntaxHighlighter</a> is hosted in GitHub and is licensed under MIT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make More Refactoring Friendly Data-bindings With C# 5]]></title>
    <link href="http://sinairv.github.io/blog/2012/11/01/how-to-make-more-refactoring-friendly-data-bindings-with-c-number-5/"/>
    <updated>2012-11-01T19:46:29+10:00</updated>
    <id>http://sinairv.github.io/blog/2012/11/01/how-to-make-more-refactoring-friendly-data-bindings-with-c-number-5</id>
    <content type="html"><![CDATA[<p>Imagine that we want to create a <code>Person</code> business object for whose properties we desire a two-way data binding. The source-to-target data-binding can be triggered by implementing <code>INotifyPropertyChanged</code> interface, like this:</p>

<p>```csharp
public class Person : INotifyPropertyChanged
{
    private string _name;
    private double _age;</p>

<pre><code>public string Name 
{
    get
    {
        return _name;
    }

    set
    {
        if (value != _name)
        {
            _name = value;
            OnPropertyChanged("Name");
        }
    }
}

public double Age 
{
    get
    {
        return _age;
    }

    set
    {
        if (_age != value)
        {
            _age = value;
            OnPropertyChanged("Age");
        }
    }
}

public event PropertyChangedEventHandler PropertyChanged;

private void OnPropertyChanged(string propertyName)
{
    if (PropertyChanged != null)
    {
        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    }
} } ```
</code></pre>

<p>See how the setters pass the property name in a <code>string</code>. This is not nice, because whenever we change the property name through refactoring tools, the string value remains untouched and we have to manually change them as well (if we are lucky enough to get notified before run-time). Anyway we had to tolerate them for years&hellip;</p>

<p>C# 5 comes with a nice feature, which is addition of two attributes <code>[CallerFilePath]</code> and <code>[CallerMemberName]</code> in the <code>System.Runtime.CompilerServices</code> namespace. If you decorate an <strong>optional</strong> string parameter of a method with one of these attributes, then the value of that parameter will be replaced with the caller&rsquo;s file name or the caller&rsquo;s member name at runtime, if no explicit value is passed for the optional parameter. They come very handy in logging scenarios, but we can use the latter for making our data-binding code nicer. This is how:</p>

<p>```csharp
public class Person : INotifyPropertyChanged
{
    private string _name;
    private double _age;</p>

<pre><code>public string Name 
{
    get
    {
        return _name;
    }

    set
    {
        if (value != _name)
        {
            _name = value;
            OnPropertyChanged();
        }
    }
}

public double Age 
{
    get
    {
        return _age;
    }

    set
    {
        if (_age != value)
        {
            _age = value;
            OnPropertyChanged();
        }
    }
}

public event PropertyChangedEventHandler PropertyChanged;

private void OnPropertyChanged([CallerMemberName]string propertyName = "")
{
    if (PropertyChanged != null)
    {
        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    }
} } ```
</code></pre>

<p>Now that string constants are removed from the setters we can more freely refactor our code. After being spoiled by automatic properties, this is still a very verbose way of defining properties; however it is much better than before.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Example for C# Dynamic in Action]]></title>
    <link href="http://sinairv.github.io/blog/2012/07/23/an-example-for-c-number-dynamic-in-action/"/>
    <updated>2012-07-23T17:20:53+10:00</updated>
    <id>http://sinairv.github.io/blog/2012/07/23/an-example-for-c-number-dynamic-in-action</id>
    <content type="html"><![CDATA[<p>Recently I was involved with enabling validation for a Windows Forms form containing several pages shown through a tree view. There were one user control defined for each page, therefore whenever a node in tree-view got activated, an instance of that user-control were shown. The user-controls did not have a common user-defined parent base-class or interface. The author of the existing code had defined a <code>Save</code> method in each control separately which performed updating data with values entered in the forms.</p>

<p>First, I changed all <code>void Save()</code> methods to <code>bool Save()</code>, and performed the validation stuff in each control separately. Then in the parent form, I created an array of <code>Control</code>s, so that I could loop through them, and call their <code>Save</code> method. But wait, <code>Save</code> is not inherited from any base-class or interface, so there&rsquo;s no polymorphism at hand. How can I call them through references of type <code>Control</code>?</p>

<p>Well honestly, the best solution would be adding a new interface to the project, say <code>ISavableControl</code> or something, add the <code>Save</code> method to it, and let the controls implement that interface. But I wanted to make a quick fix to the problem without adding new files and types to the code. Here C#&rsquo;s <code>dynamic</code> comes into action.</p>

<p>Using <code>dynamic</code> keyword, one postpones binding methods, properties, and fields to run-time. In our scenario we know that the user-controls each have a method called <code>Save</code>, which is not derived from a parent. Without <code>dynamic</code>, I would need to have a reference explicitly from each user control&rsquo;s type, and I would have to call them one by one, as in:</p>

<p><code>csharp
bool succeeded = false;
succeeded = userControl1.Save();
succeeded = succeeded || userControl2.Save();
succeeded = succeeded || userControl3.Save();
// ...
succeeded = succeeded || userControln.Save();
</code></p>

<p>However using <code>dynamic</code> keyword, life gets a lot easier:</p>

<p>```csharp
// objects are not inherited from a base class or interface,
// therefore we cannot call Save using polymorphism
bool succeeded = false;
foreach(var ctrl in controlsArray)
{
    dynamic dynCtrl = ctrl;
    succeeded = succeeded || dynCtrl.Save();
}</p>

<p>// do something with the value of succeeded
```</p>

<p>Take care that binding the <code>Save</code> methods to controls happen at runtime. Therefore if a control does not implement a <code>Save</code> method, or if another one misspells <code>Save</code>, as say <code>Svae</code>, you will get no hints at compile time. So, try to avoid this style of coding, unless you have good reasons for doing so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Snippet for Calculating Mean, Variance, and Standard Deviation]]></title>
    <link href="http://sinairv.github.io/blog/2011/05/15/code-snippet-for-calculating-mean/"/>
    <updated>2011-05-15T22:58:36+10:00</updated>
    <id>http://sinairv.github.io/blog/2011/05/15/code-snippet-for-calculating-mean</id>
    <content type="html"><![CDATA[<p>Here are the methods to calculate mean, variance, and standard deviation of a vector of values. These are put here for easy reference, so that I do not need to rewrite them again (and again (and again)).</p>

<script src="https://gist.github.com/sinairv/2693528.js"></script>

]]></content>
  </entry>
  
</feed>
